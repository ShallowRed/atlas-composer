# Merge Preset Registry into Atlas Registry - Implementation Plan

## Objective
Consolidate preset definitions from `configs/presets/registry.json` into `configs/atlas-registry.json` to create a single source of truth for all atlas-related metadata, including available presets. Eliminate duplicate preset ID arrays and simplify preset discovery.

## Current State Analysis

### Current Structure (Problematic)
Two separate registries with overlapping concerns:

**atlas-registry.json:**
- Defines atlases with metadata (id, name, group, sortOrder, configPath)
- Contains root `defaultAtlas` field (string ID)
- Contains `behavior.defaultPreset` (string ID)
- Contains `behavior.availablePresets` (string array of IDs)
- No preset metadata - just references by ID

**presets/registry.json:**
- Defines all presets with full metadata
- Fields: id, name, atlasId, type, description, pattern, territoryCount
- Version 2.0 format
- Single flat array of preset entries

### Problems with Current Design
1. **Duplication**: Preset IDs listed in two places (`availablePresets` array + preset registry)
2. **Disconnected**: Atlas behavior references presets, but preset definitions live elsewhere
3. **Maintenance overhead**: Adding preset requires updating two files
4. **Unclear ownership**: Not obvious where to look for "what presets exist for atlas X"
5. **Type fragmentation**: PresetRegistryEntry vs behavior.availablePresets use different structures

## Proposed Unified Structure

### Single Registry: atlas-registry.json

```json
{
  "$schema": "./atlas-registry.schema.json",
  "groups": [...],
  "atlases": [
    {
      "id": "france",
      "name": { "en": "France", "fr": "France" },
      "group": "country",
      "sortOrder": 1,
      "isDefault": true,
      "configPath": "./atlases/france.json",
      "presets": [
        {
          "id": "france-default",
          "name": { "en": "Default composite", "fr": "Composite par défaut" },
          "type": "composite-custom",
          "isDefault": true,
          "pattern": "single-focus",
          "territoryCount": 9,
          "description": { "en": "...", "fr": "..." }
        },
        {
          "id": "france-test",
          "name": { "en": "Test composite", "fr": "Composite test" },
          "type": "composite-custom",
          "pattern": "single-focus",
          "territoryCount": 9
        },
        {
          "id": "france-unified",
          "name": { "en": "Unified view", "fr": "Vue unifiée" },
          "type": "unified"
        },
        {
          "id": "france-split",
          "name": { "en": "Split view", "fr": "Vue séparée" },
          "type": "split"
        },
        {
          "id": "france-built-in",
          "name": { "en": "D3 composite", "fr": "Composite d3" },
          "type": "built-in-composite"
        }
      ],
      "behavior": {
        "collectionSets": {
          "territoryManager": { "collectionSet": "geographic" },
          "configSection": { "collectionSet": "incremental" }
        }
      }
    }
  ]
}
```

### Key Changes

1. **Move preset definitions**: Inline preset metadata directly under each atlas
2. **Eliminate `defaultAtlas` root field**: Replace with `isDefault: true` flag in atlas object
3. **Eliminate `defaultPreset` string**: Replace with `isDefault: true` flag in preset object
4. **Eliminate `availablePresets` array**: All presets under `atlases[].presets` are available
5. **I18n preset names**: Convert string names to i18n objects like atlas names
6. **I18n descriptions**: Convert string descriptions to i18n objects
7. **Simplify behavior**: Remove preset-related fields from behavior object
8. **Delete separate registry**: Remove `configs/presets/registry.json` entirely

## Benefits

1. **Single source of truth**: One file defines atlases and their presets
2. **Clearer ownership**: "France's presets" are visually nested under France
3. **No duplication**: Preset IDs only appear once (in definition)
4. **Easier discovery**: `atlases.find(a => a.id === 'france').presets` - that's it
5. **Type safety**: Stronger TypeScript types, fewer string references
6. **Simpler API**: No need to filter/join registries to find "presets for atlas X"
7. **Better i18n**: Preset names/descriptions follow same i18n pattern as atlas names
8. **Reduced maintenance**: One file to update when adding/modifying presets
9. **Consistent pattern**: Both atlases and presets use `isDefault: true` flag (no special root fields)

## Implementation Phases

### Phase 1: Type System Updates
- [ ] File: `src/types/registry.ts`
  - Add `PresetDefinition` interface (replaces `PresetRegistryEntry`)
  - Add `isDefault?: boolean` flag to `PresetDefinition`
  - Add i18n support: `name: I18nValue`, `description?: I18nValue`
  - Add optional fields: `pattern?, territoryCount?`
  - Update `AtlasRegistryEntry` to include:
    - `presets: PresetDefinition[]`
    - `isDefault?: boolean` flag
  - Update `AtlasRegistry` to remove `defaultAtlas: string` field
  - Remove `defaultPreset` and `availablePresets` from `AtlasRegistryBehavior`
  - Mark old behavior fields as deprecated

- [ ] File: `src/core/presets/types.ts`
  - Mark `PresetRegistryEntry` as deprecated (keep for migration)
  - Mark `PresetRegistry` as deprecated (keep for migration)
  - Add JSDoc pointing to new location in registry.ts

### Phase 2: Schema Updates
- [ ] File: `configs/atlas-registry.schema.json`
  - Remove `defaultAtlas` from root required fields
  - Add `isDefault` (boolean, optional) to atlas entry
  - Add `presets` array definition to atlas entry
  - Add preset object schema:
    - `id` (string, required, pattern: kebab-case)
    - `name` (I18nValue, required)
    - `type` (enum: composite-custom|unified|split|built-in-composite, required)
    - `isDefault` (boolean, optional)
    - `pattern` (string, optional)
    - `territoryCount` (number, optional)
    - `description` (I18nValue, optional)
  - Mark `defaultAtlas` root field as deprecated
  - Mark `behavior.defaultPreset` as deprecated
  - Mark `behavior.availablePresets` as deprecated

### Phase 3: Data Migration
- [ ] File: `configs/atlas-registry.json`
  - Remove `defaultAtlas` root field
  - Add `isDefault: true` to france atlas (from current `defaultAtlas`)
  - For each atlas, add `presets` array
  - Copy preset data from `presets/registry.json`, filtering by `atlasId`
  - Convert string names to i18n objects (extract language from description context)
  - Convert string descriptions to i18n objects
  - Mark default preset with `isDefault: true` (from `behavior.defaultPreset`)
  - Keep deprecated `defaultAtlas`, `behavior.defaultPreset`, and `behavior.availablePresets` temporarily
  - Validate against updated schema

### Phase 4: Registry Service Updates
- [ ] File: `src/core/atlases/registry.ts`
  - Update `DEFAULT_ATLAS` to find atlas with `isDefault: true` (with fallback to old `defaultAtlas`)
  - Add `getDefaultAtlas(): AtlasRegistryEntry` helper
  - Add `getAtlasPresets(atlasId: string): PresetDefinition[]` helper
  - Add `getDefaultPreset(atlasId: string): PresetDefinition | undefined` helper
  - Add `getPresetById(atlasId: string, presetId: string): PresetDefinition | undefined` helper
  - Keep backward compatibility with old `defaultAtlas` and behavior fields (with deprecation warnings)

- [ ] File: `src/services/presets/preset-loader.ts`
  - Update `loadRegistry()` to use atlas registry instead of preset registry
  - Transform atlas registry → legacy PresetRegistry format for compatibility
  - Extract all presets from all atlases into flat array
  - Add deprecation warnings for old registry path
  - Update `listPresets()` to query atlas registry

### Phase 5: Component Updates
- [x] File: `src/components/ui/presets/PresetSelector.vue`
  - Update to query presets from atlas registry
  - Use `getAtlasPresets(currentAtlas)` instead of filtering preset registry
  - Update UI to display i18n preset names/descriptions
  - Removed async metadata loading (now direct from registry)

- [x] File: `src/components/MapRenderer.vue`
  - Updated to use `getAtlasPresets()` instead of `behavior.availablePresets`

- [x] File: `src/composables/useViewState.ts`
  - Updated to use `getAtlasPresets()` instead of `behavior.availablePresets`

### Phase 6: Test Updates
- [ ] File: `src/services/presets/__tests__/preset-loader.spec.ts`
  - Update tests to expect atlas registry structure
  - Add tests for new registry helper functions

- [ ] File: `src/core/atlases/__tests__/registry.spec.ts` (if exists, or create)
  - Add tests for preset lookup functions
  - Test default preset resolution
  - Test preset filtering by type

### Phase 7: Cleanup
- [ ] Delete `configs/presets/registry.json`
- [ ] Remove deprecated types from `src/core/presets/types.ts`
- [ ] Remove deprecated behavior fields from `src/types/registry.ts`
- [ ] Remove backward compatibility code from `preset-loader.ts`
- [ ] Update all JSDoc references to registry location

## Documentation Updates

After user validates implementation:

- [ ] `docs/atlases.llm.txt`
  - Update "Atlas Registry System" section
  - Document new preset inline structure
  - Document `isDefault` flag pattern
  - Remove references to separate preset registry

- [ ] `docs/presets.llm.txt`
  - Update "Registry Types" section
  - Document new `PresetDefinition` in registry.ts
  - Update "Loading Paths" to reference atlas registry
  - Remove references to `configs/presets/registry.json`

- [ ] `docs/architecture.llm.txt`
  - Update preset system overview
  - Update directory structure (remove registry.json reference)

## Migration Notes

### Breaking Changes
- `configs/presets/registry.json` deleted (replaced by atlas registry)
- `PresetRegistryEntry` type location moved (registry.ts instead of presets/types.ts)
- `defaultAtlas` root field removed (use `isDefault` flag in atlas definition)
- `behavior.defaultPreset` removed (use `isDefault` flag in preset definition)
- `behavior.availablePresets` removed (all presets under `atlases[].presets` are available)

### Backward Compatibility Strategy
Phase 4 provides transition period:
- Old `defaultAtlas` root field still works (with deprecation warning)
- Old `behavior.defaultPreset` field still works (with deprecation warning)
- Old `behavior.availablePresets` field still works (with deprecation warning)
- PresetLoader transparently transforms atlas registry to old format
- Gives time to update external tools/scripts if any exist

### Rollout Strategy
1. Deploy Phase 1-4 together (types + data + compatibility layer)
2. Monitor for issues with preset loading
3. Deploy Phase 5-6 (component updates + tests)
4. Validate all preset types work correctly
5. Deploy Phase 7 (cleanup) after confirmation

## Verification Checklist

- [ ] All atlas presets load correctly in UI
- [ ] Default presets auto-load on atlas change
- [ ] PresetSelector shows correct presets for each atlas
- [ ] Preset names display in correct language (en/fr)
- [ ] Preset descriptions display in correct language
- [ ] All preset types (composite-custom, unified, split, built-in-composite) work
- [ ] Switching between atlases correctly filters preset list
- [ ] No console warnings about deprecated fields
- [ ] Schema validation passes for atlas-registry.json
- [ ] All tests pass
- [ ] Build succeeds without errors

## Status
Status: PLANNED
Created: 2025-10-21
Last Updated: 2025-10-21
