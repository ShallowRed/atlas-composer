# Vue Architecture

## Overview

Vue 3 Composition API application with TypeScript, Pinia stores, and composable-based logic extraction.

**Stack**: Vue 3, TypeScript, Pinia, Vue Router, Vue I18n, Tailwind CSS, DaisyUI
**Test Framework**: Vitest + @vue/test-utils
**Test Coverage**: 122 tests (100% passing)

## Project Structure

```
src/
├── App.vue                    # Root component, layout
├── main.ts                    # App initialization
├── router/index.ts            # Route definitions
├── views/
│   ├── MapView.vue           # Main view (142 lines)
│   └── AboutView.vue         # About page
├── components/
│   ├── MapRenderer.vue       # D3 map rendering (147 lines)
│   ├── TerritoryControls.vue # Territory controls (refactored with RangeSlider, Alert)
│   └── ui/                   # 27 reusable UI components organized in subdirectories
│       ├── layout/           # Layout and page structure components
│       ├── primitives/       # Core reusable UI elements
│       ├── forms/            # Form controls and inputs
│       ├── settings/         # Settings and preferences
│       ├── projections/      # Projection-related components
│       ├── import/           # Import-related components
│       └── export/           # Export-related components
├── composables/              # 9 composition functions
├── stores/                   # 3 Pinia stores
└── types/                    # TypeScript definitions
```

## Component Hierarchy

```
App.vue
├── AppHeader.vue (navigation, language, theme)
├── RouterView
│   └── MapView.vue (main coordinator)
│       ├── MapRenderer.vue (D3 rendering engine)
│       ├── TerritoryControls.vue (territory transforms)
│       ├── ProjectionSelector.vue (projection selection)
│       └── UI Components
│           ├── ViewModeSection
│           ├── ProjectionInfo
│           ├── ProjectionParamsControls
│           ├── ProjectionConfirmDialog
│           └── ToastNotification
└── AppFooter.vue (credits, links)
```

## Key Components

### MapView.vue (142 lines)
**Role**: Main coordinator component
**Responsibilities**:
- Orchestrates child components
- Manages layout and sections
- No business logic (delegates to composables)
- Uses: useAtlasData, useLoadingState

### MapRenderer.vue (147 lines)
**Role**: D3 rendering engine
**Responsibilities**:
- SVG canvas management
- D3 projection rendering
- Territory positioning
- Uses: useAtlasData, useLoadingState, useProjectionConfig
**Tests**: 10 tests covering props, rendering, store integration

### TerritoryControls.vue (119 lines)
**Role**: Territory transform controls
**Responsibilities**:
- Territory projection selection
- Translation controls (x, y)
- Scale controls
- Reset functionality
- Uses: useTerritoryTransforms, useTerritoryConfig

### ProjectionSelector.vue (114 lines)
**Role**: Projection selection interface
**Responsibilities**:
- Projection search/filter
- Projection dropdown
- Recommendation badges
- Uses: useProjectionFiltering, useProjectionRecommendations

### UI Components (27 components organized in 7 subdirectories)

**Layout Components** (src/components/ui/layout/):
- **AppHeader**: Application header with navigation and language selector
- **AppFooter**: Application footer with credits and links
- **MainLayout**: Main application layout structure
- **ScrollableContent**: Scrollable content wrapper

**Primitive Components** (src/components/ui/primitives/):
- **AccordionItem**: Collapsible content item with title/subtitle
- **Alert**: Status/notification messages with type variants (info, success, warning, error)
- **ButtonGroup**: Toggle button group for exclusive selection with full-width layout
- **CardContainer**: Card wrapper with title, icon, and scrollable content
- **LabelWithIcon**: Label wrapper with optional icon
- **Modal**: Standardized dialog wrapper with slots for title, content, and actions

**Form Controls** (src/components/ui/forms/):
- **CheckboxControl**: Checkboxes for boolean settings (42 lines)
- **RangeSlider**: Range input with label, icon, value display, and customizable styling
- **DropdownControl**: Accessible DaisyUI dropdown selections with icon/badge support (580 lines)
  - Two modes: standard (fieldset wrapper) and inline (for navbar use)
  - Manual JS-controlled dropdown (overrides DaisyUI CSS focus behavior)
  - Supports emoji/text icons and icon classes (detects 'ri-' prefix)
  - Supports badges for visual indicators (e.g., projection recommendations)
  - Supports option groups with category labels
  - Full keyboard navigation:
    - Up/Down arrows: when open only, immediately select previous/next option and stay open
    - Left/Right arrows: when closed only, cycle through options with looping (first↔last)
    - Enter/Space: select focused option and close dropdown (or open if closed)
    - Escape: close dropdown
    - Home/End: jump to first/last option (when open)
    - Tab: close dropdown and move focus
    - Click: select option and close dropdown
  - ARIA attributes for screen readers (role, aria-expanded, aria-selected, aria-activedescendant)
  - Focus management with proper return to button after selection
  - Thick visible focus state (4px outline) for accessibility
  - Selected option highlighted with primary color when dropdown open
  - Translation support with Vue I18n ($t() integration)
  - isNavigating flag prevents blur events during arrow navigation
  - Exports DropdownOption and DropdownOptionGroup interfaces
- **ToggleControl**: Toggle switches for boolean settings (42 lines)

**Settings Components** (src/components/ui/settings/):
- **LanguageSelector**: Language selection dropdown using DropdownControl in inline mode
  - Uses inline prop for navbar integration (no fieldset wrapper)
  - Converts SUPPORTED_LOCALES to DropdownOption format
  - Uses setLocale() for language switching
  - Ghost button style with translate icon
- **ThemeSelector**: Theme selection interface using DropdownControl with option groups
  - Groups themes into light and dark categories
  - 35 theme options across 2 groups

**Projection Components** (src/components/ui/projections/):
- **ProjectionConfirmDialog**: Confirmation dialog for projection changes
- **ProjectionDropdown**: Projection dropdown using DropdownControl with recommendation badges
  - Displays projection options with recommendation indicators
  - Supports loading skeleton state
  - Automatically transforms badges from recommendation data
- **ProjectionInfo**: Projection information display
- **ProjectionParamsControls**: Projection parameter adjustment controls
- **ProjectionRecommendationBadge**: Projection recommendation indicators
- **ProjectionSearchBar**: Projection search input
- **ProjectionSelector**: Main projection selection interface (114 lines)

**Import Components** (src/components/ui/import/):
- **ImportControls**: Import and export control buttons
- **ImportModal**: Modal for importing configurations

**Export Components** (src/components/ui/export/):
- **CompositeExportDialog**: Dialog for exporting composite configurations
- **ToastNotification**: Toast notification display

**Composition Patterns**:
- RangeSlider used in ProjectionParamsControls (6 instances) and TerritoryControls (3 instances)
- ButtonGroup used in CompositeExportDialog (3 instances)
- Modal used in CompositeExportDialog for standardized dialogs
- Alert used in ProjectionParamsControls and TerritoryControls for status messages
- DropdownControl used in AtlasConfigSection (5 instances), ThemeSelector (1 instance), LanguageSelector (1 instance), ProjectionDropdown (2 instances)
  - Supports emoji/text icons (flag emojis: 🇫🇷, 🇵🇹, 🇪🇸, 🇪🇺, 🇺🇸, 🌍)
  - Supports icon classes (remix icons: ri-layout-grid-line, etc.)
  - Supports badges (projection recommendations: '+++', '++', '+')
  - Full a11y: ARIA attributes, keyboard navigation (Arrow keys, Enter, Space, Escape, Home, End, Tab)
  - Focus management with visible focus states (WCAG AA compliant)
  - Translation support with Vue I18n integration
- ToggleControl used in DisplayOptionsSection (4 instances) and TerritoryControls (1 instance)

## Composables (9 functions)

### Data Loading
**useAtlasData** (128 lines)
- Orchestrates all data loading
- initialize(), loadDataForViewMode(), reinitialize(), reloadUnifiedData()
- setupWatchers() - Consolidates all data loading watchers
- Returns: { showSkeleton, initialize, loadDataForViewMode, reinitialize, reloadUnifiedData, setupWatchers }
- Tests: 13 tests

**useLoadingState** (32 lines)
- Manages skeleton loading state
- withMinLoadingTime() - Ensures minimum loading duration
- Returns: { showSkeleton, withMinLoadingTime }

### Store Abstraction
**useProjectionConfig** (58 lines)
- Projection configuration helpers
- compositeProjectionOptions, getMainlandProjection(), getTerritoryProjection()
- Returns: { compositeProjectionOptions, getMainlandProjection, getTerritoryProjection }
- Tests: 8 tests

**useViewMode** (34 lines)
- View mode options
- Returns: { viewModeOptions }

**useTerritoryConfig** (27 lines)
- Territory configuration state
- Returns: { hasTerritoriesForProjectionConfig }

### Component Logic
**useTerritoryTransforms** (155 lines)
- Territory projection management
- Translation and scale controls
- Reset functions
- Used by: TerritoryControls.vue

**useProjectionFiltering** (91 lines)
- Projection search and filtering
- searchQuery, filteredProjections, clearSearch, hasSearch
- Used by: ProjectionSelector.vue

**useProjectionRecommendations** (78 lines)
- Recommendation badge display
- Classification logic (best, good, suitable)
- Used by: ProjectionSelector.vue

### Validation
**useProjectionValidation** (148 lines)
- Projection selection validation
- Warning generation
- Validation state management

## State Management

### configStore (361 lines)
**Domain**: Configuration state
**Responsibilities**:
- Atlas selection (current atlas, region, territories)
- View mode (composite, split, unified)
- Projection mode (existing, custom)
- Projection parameters (custom overrides)
- Computed properties: effective parameters with priority resolution
**Used by**: All configuration components, MapRenderer, TerritoryControls

### geoDataStore (200 lines)
**Domain**: Geographic data
**Responsibilities**:
- GeoJSON data caching
- Territory data management
- Loading states
**Used by**: MapRenderer, data loading composables

### ui.ts (81 lines)
**Domain**: UI state
**Responsibilities**:
- Theme management (light/dark)
- Display toggles (graticule, sphere, composition borders, map limits)
  - showGraticule: Display coordinate grid lines
  - showSphere: Display sphere outline
  - showCompositionBorders: Display territory region borders (composite views only)
  - showMapLimits: Display viewport bounds rectangle
**Used by**: ThemeSelector, DisplayOptionsSection, MapRenderer

### territory.ts (57 lines)
**Domain**: Territory state
**Responsibilities**:
- Territory projections
- Territory translations (x, y)
- Territory scales
- Initialization and reset
**Used by**: TerritoryControls, useTerritoryTransforms

## Data Flow

```
User Action (Template)
    ↓
v-model / Event Handler
    ↓
Composable Logic (if needed)
    ↓
Store Action/Mutation
    ↓
Store State Change
    ↓
Watcher in Composable (useAtlasData)
    ↓
Service Call
    ↓
Store Update → Component Re-render
```

**Key Pattern**: Centralized data loading in useAtlasData composable with setupWatchers()

## Type Safety

### vue-props.ts (130 lines)
Centralized prop type definitions:
- MapRendererProps
- ConfigSectionProps
- ViewComponentProps
- TerritoryControlsProps
- ProjectionSelectorProps
- DisplayOptionsSectionProps
- All props include default values exported as constants

### composables.ts (240 lines)
Composable return type interfaces:
- LoadingState
- ProjectionConfig
- TerritoryConfig
- ViewModeConfig
- TerritoryTransforms
- AtlasData
- ProjectionFiltering
- ProjectionRecommendations
- ProjectionValidation

### Central Export
All types exported from `src/types/index.ts` for consistent imports.

## Testing

**Framework**: Vitest + @vue/test-utils
**Coverage**: 122 tests (100% passing)

### Test Files
- `src/components/__tests__/MapRenderer.spec.ts` (10 tests)
  - Props validation, rendering, store integration, computed properties
- `src/composables/__tests__/useProjectionConfig.spec.ts` (8 tests)
  - Projection helpers, i18n integration
- `src/composables/__tests__/useAtlasData.spec.ts` (13 tests)
  - Data loading orchestration, watchers, error handling

### Test Infrastructure
- i18n mocking with createI18n
- Store mocking with createPinia/setActivePinia
- withSetup() helper for composable testing with Vue context
- Promise rejection handling with .catch(() => {})

## Patterns

### Composition API
- All components use `<script setup lang="ts">`
- Logic extracted to composables
- Props defined with defineProps<Type>()
- Events defined with defineEmits<Type>()

### State Management
- Global state: Pinia stores
- Local state: component refs
- Derived state: computed properties
- Store abstraction: composables wrap store access

### Component Design
- Single Responsibility Principle
- Props down, events up
- Composition over inheritance
- Templates under 100 lines

### Code Organization
- Feature-based grouping (composables/, stores/, components/ui/)
- Co-located tests (__tests__ folders)
- Centralized types (src/types/)
- Average component size: 70 lines

## Performance

### Current Optimizations
- Watchers centralized in useAtlasData.setupWatchers()
- Loading state with withMinLoadingTime()
- Shallow component hierarchy
- Composables enable code splitting

### Future Opportunities
- Virtual scrolling for large territory lists
- v-memo for static map content
- Lazy loading for ProjectionSelector
- shallowRef for large GeoJSON objects
- Computed property memoization

## Integration Points

### Services
Components never call services directly. Flow:
1. Component action
2. Store mutation
3. Watcher in useAtlasData
4. Service call
5. Store update
6. Component re-render

### D3/Observable Plot
- MapRenderer.vue owns D3 integration
- CartographerService coordinates rendering
- Services handle D3 projection creation

### I18n
- Vue I18n plugin for translations
- useI18n() composable in components
- Locale files: src/i18n/locales/en.json, fr.json

## Related Documentation

- docs/architecture.llm.rxt - Overall architecture
- docs/services.llm.txt - Service layer
- docs/atlases.llm.txt - Atlas configuration
- docs/projections.llm.txt - Projection system
