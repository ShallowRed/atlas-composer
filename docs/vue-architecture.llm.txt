# Vue Architecture

## Overview

Vue 3 Composition API application with TypeScript, Pinia stores, and composable-based logic extraction.

**Stack**: Vue 3, TypeScript, Pinia, Vue Router, Vue I18n, Tailwind CSS, DaisyUI
**Test Framework**: Vitest + @vue/test-utils
**Test Coverage**: 164 tests (100% passing)

## Project Structure

```
src/
├── App.vue                    # Root component, layout
├── main.ts                    # App initialization
├── router/index.ts            # Route definitions
├── views/
│   ├── MapView.vue           # Main view (simplified with useViewState)
│   └── AboutView.vue         # About page
├── components/
│   ├── MapRenderer.vue       # D3 map rendering (147 lines)
│   ├── TerritoryControls.vue # Territory controls (uses shouldShowEmptyState)
│   └── ui/                   # 27 reusable UI components organized in subdirectories
│       ├── layout/           # Layout and page structure components
│       ├── primitives/       # Core reusable UI elements
│       ├── forms/            # Form controls and inputs
│       ├── settings/         # Settings and preferences
│       ├── projections/      # Projection-related components (3 components)
│       ├── parameters/       # Parameter control components (3 components)
│       ├── import/           # Import-related components
│       └── export/           # Export-related components
├── composables/              # 11 composition functions including useViewState, useTerritoryCursor, useTerritoryParameters
├── stores/                   # 4 Pinia stores
└── types/                    # TypeScript definitions
```

## Component Hierarchy

```
App.vue
├── AppHeader.vue (navigation, language, theme)
├── RouterView
│   └── MapView.vue (main coordinator)
│       ├── MapRenderer.vue (D3 rendering engine)
│       ├── TerritoryControls.vue (territory transforms)
│       ├── ProjectionDropdown.vue (projection selection with info modal)
│       └── UI Components
│           ├── ViewModeSection
│           ├── ProjectionInfo
│           ├── ProjectionParamsControls
│           └── ToastNotification
└── AppFooter.vue (credits, links)
```

## Key Components

### MapView.vue (142 lines)
**Role**: Main coordinator component
**Responsibilities**:
- Orchestrates child components
- Manages layout and sections
- No business logic (delegates to composables)
- Uses: useAtlasData, useLoadingState

### MapRenderer.vue (147 lines)
**Role**: D3 rendering engine with interactive panning
**Responsibilities**:
- SVG canvas management
- D3 projection rendering via MapRenderCoordinator
- Territory positioning
- Interactive mouse panning (mouse drag to rotate projections)
- Cursor feedback (grab/grabbing) during interaction
- Watches projection parameters and fitting mode for reactive updates
- Uses: MapRenderCoordinator, MapSizeCalculator, projectionRegistry, getRelevantParameters
**Tests**: 10 tests covering props, rendering, store integration
**Panning Feature**:
- Supports 2-axis mouse drag panning for projections with `rotateLongitude` parameter
- Tracks mouse delta (dx, dy) and converts to rotation degrees (~0.5° per pixel)
- Updates both longitude and latitude rotation through configStore.setCustomRotate()
- Wraps longitude to -180°/180° range, clamps latitude to -90°/90° range
- Prevents pole flipping by clamping latitude rotation
- Global mouse event listeners ensure smooth dragging even outside element
- Automatically determines panning support based on projection family (via getRelevantParameters)
- Cursor changes to 'grab' when panning available, 'grabbing' while dragging
- Works with azimuthal, cylindrical, pseudocylindrical, and polyhedral projection families
- **Latitude Lock**: Respects configStore.rotateLatitudeLocked state
  - When locked: Only longitude panning (latDelta = 0)
  - When unlocked: Full 2-axis panning
  - Uses supportsLatitudePanning computed for conditional logic

### TerritoryControls.vue (264 lines)
**Role**: Territory transform and parameter controls
**Responsibilities**:
- Territory projection selection with dynamic family detection
- Territory-specific parameter controls (custom composite mode)
- Translation controls (x, y)
- Scale controls
- Reset functionality
- Parameter inheritance and validation feedback
- Uses: useTerritoryTransforms, useTerritoryConfig, projectionRegistry
- Components: TerritoryParameterControls for parameter editing per territory

### ProjectionSelector.vue (114 lines)
**Role**: Projection selection interface
**Responsibilities**:
- Projection search/filter
- Projection dropdown
- Recommendation badges
- Uses: useProjectionFiltering, useProjectionRecommendations

### UI Components (30 components organized in 8 subdirectories)

**Layout Components** (src/components/ui/layout/):
- **AppHeader**: Application header with navigation, language selector, and theme selector
- **AppFooter**: Application footer with credits and links
- **MainLayout**: Main application layout structure
- **ScrollableContent**: Scrollable content wrapper

**Primitive Components** (src/components/ui/primitives/):
- **AccordionItem**: Collapsible content item with title/subtitle
- **Alert**: Status/notification messages with type variants (info, success, warning, error)
- **ButtonGroup**: Toggle button group for exclusive selection with full-width layout
- **CardContainer**: Card wrapper with title, icon, and scrollable content. Supports optional actions slot for buttons in header (e.g., ShareButton in MapView main card)
- **LabelWithIcon**: Label wrapper with optional icon
- **Modal**: Standardized dialog wrapper with slots for title, content, and actions

**Form Controls** (src/components/ui/forms/):
- **CheckboxControl**: Checkboxes for boolean settings (42 lines)
- **RangeSlider**: Range input with label, icon, value display, and customizable styling
- **DropdownControl**: Accessible DaisyUI dropdown selections with icon/badge support (590 lines, 42 tests)
  - Two modes: standard (fieldset wrapper) and inline (for navbar use)
  - Manual JS-controlled dropdown (overrides DaisyUI CSS focus behavior)
  - Supports emoji/text icons and icon classes (detects 'ri-' prefix)
  - Supports badges for visual indicators (e.g., projection recommendations)
  - Supports option groups with category labels
  - Full keyboard navigation:
    - Up/Down arrows: when open only, immediately select previous/next option and stay open
    - Left/Right arrows: when closed only, cycle through options with looping (first↔last)
    - Enter/Space: select focused option and close dropdown (or open if closed)
    - Escape: close dropdown
    - Home/End: jump to first/last option (when open)
    - Tab: close dropdown and move focus
    - Click: select option and close dropdown
  - Automatic scroll behavior: focused option scrolls into view during keyboard navigation
  - ARIA attributes for screen readers (role, aria-expanded, aria-selected, aria-activedescendant)
  - Focus management with CSS highlighting (no DOM focus to avoid blur conflicts)
  - Thick visible focus state (2px outline + background color) for accessibility
  - Selected option highlighted with primary color when dropdown open
  - Translation support with Vue I18n ($t() integration)
  - isNavigating flag prevents blur events during arrow navigation
  - Exports DropdownOption and DropdownOptionGroup interfaces
  - Comprehensive test suite covers rendering, state management, selection, keyboard navigation, accessibility, and edge cases
- **ToggleControl**: Toggle switches for boolean settings (42 lines)

**Settings Components** (src/components/ui/settings/):
- **LanguageSelector**: Language selection dropdown using DropdownControl in inline mode
  - Uses inline prop for navbar integration (no fieldset wrapper)
  - Converts SUPPORTED_LOCALES to DropdownOption format
  - Uses setLocale() for language switching
  - Ghost button style with translate icon
- **ThemeSelector**: Theme selection interface using DropdownControl with option groups
  - Groups themes into light and dark categories
  - 35 theme options across 2 groups
- **ShareButton**: Shareable URL generator with clipboard copy functionality
  - Uses useUrlState composable to generate shareable URLs
  - One-click copy to clipboard with visual feedback
  - Three states: default (Share), success (Copied!), error (Failed to copy)
  - Auto-resets after 2 seconds (success) or 3 seconds (error)
  - Displays full URL in tooltip on hover
  - Ghost button style with share/check/error icons (Remix icons)
  - Positioned in MapView main content card header (top right corner)
  - Fully tested (9 tests covering rendering, copy, state transitions, timeout handling)

**Projection Components** (src/components/ui/projections/):
- **ProjectionDropdown**: Projection selection component with info modal
  - Uses DropdownControl with recommendation badges (Remix icons)
  - Displays badge icons to left of projection names
  - Badge system: ri-star-fill (excellent), ri-star-line (good), ri-star-half-line (usable)
  - Includes info button that opens ProjectionInfo modal
  - Supports loading skeleton state
  - Automatically transforms recommendation badges with CSS classes (text-success, text-info, text-base-content)
- **ProjectionInfo**: Projection information display
- **ProjectionParamsControls**: Projection parameter adjustment controls with latitude lock toggle

**Parameter Components** (src/components/ui/parameters/):
- **TerritoryParameterControls**: Territory-specific parameter editing interface
  - Uses unified `ProjectionParameters` interface across all parameter operations
  - Integrates with `parameterStore` for reactive parameter management
  - Template conditions use computed properties for parameter group visibility
  - Provides parameter controls for individual territories in custom composite mode
  - Uses dynamic projection family detection via projectionRegistry
  - Supports all projection families (CONIC, AZIMUTHAL, CYLINDRICAL, etc.)
  - Parameter groups: Position (center/rotate), Projection-specific (parallels), View (scale/clipAngle), Advanced (precision/translate)
  - Validation feedback with real-time error/warning display via `UnifiedParameterConstraints`
  - Parameter inheritance indicators and override functionality
  - Reset controls for clearing territory-specific overrides
- **ParameterControlGroup**: Reusable parameter control group wrapper
  - Provides consistent styling and layout for parameter sections
  - Supports title, description, and collapsible content areas
- **ParameterValidationFeedback**: Parameter validation feedback display
  - Shows validation errors and warnings with contextual messaging
  - Integrates with parameter validation system for real-time feedback

**Import Components** (src/components/ui/import/):
- **ImportControls**: Import and export control buttons
- **ImportModal**: Modal for importing configurations

**Export Components** (src/components/ui/export/):
- **CompositeExportDialog**: Dialog for exporting composite configurations
- **ToastNotification**: Toast notification display

**Composition Patterns**:
- RangeSlider used in ProjectionParamsControls (6 instances) and TerritoryControls (3 instances)
- ButtonGroup used in CompositeExportDialog (3 instances)
- Modal used in CompositeExportDialog for standardized dialogs
- Alert used in ProjectionParamsControls and TerritoryControls for status messages
- DropdownControl used in AtlasConfigSection (5 instances), ThemeSelector (1 instance), LanguageSelector (1 instance), ProjectionDropdown (1 instance)
  - Supports emoji/text icons (flag emojis: 🇫🇷, 🇵🇹, 🇪🇸, 🇪🇺, 🇺🇸, 🌍)
  - Supports icon classes (remix icons: ri-layout-grid-line, etc.)
  - Supports icon badges (projection recommendations: ri-star-fill, ri-star-line, ri-star-half-line)
  - Icon badges positioned to left of option label
  - Badge CSS classes automatically applied (text-success, text-info, text-base-content)
  - Group titles display category icons (via PROJECTION_CATEGORY_ICONS from projection-icons.ts)
  - Full a11y: ARIA attributes, keyboard navigation (Arrow keys, Enter, Space, Escape, Home, End, Tab)
  - Focus management with visible focus states (WCAG AA compliant)
  - Translation support with Vue I18n integration
- ToggleControl used in DisplayOptionsSection (4 instances) and TerritoryControls (1 instance)

## Composables (11 functions)

### Data Loading
**useAtlasData** (128 lines)
- Orchestrates all data loading
- initialize(), loadDataForViewMode(), reinitialize(), reloadUnifiedData()
- setupWatchers() - Consolidates all data loading watchers
- Returns: { showSkeleton, initialize, loadDataForViewMode, reinitialize, reloadUnifiedData, setupWatchers }
- Tests: 13 tests

**useLoadingState** (32 lines)
- Manages skeleton loading state
- withMinLoadingTime() - Ensures minimum loading duration
- Returns: { showSkeleton, withMinLoadingTime }

### Store Abstraction
**useProjectionConfig** (58 lines)
- Projection configuration helpers
- compositeProjectionOptions, getMainlandProjection(), getTerritoryProjection()
- Returns: { compositeProjectionOptions, getMainlandProjection, getTerritoryProjection }
- Tests: 8 tests

**useViewMode** (34 lines)
- View mode options
- Returns: { viewModeOptions }

**useTerritoryConfig** (27 lines)
- Territory configuration state
- Returns: { hasTerritoriesForProjectionConfig }

### Component Logic
**useTerritoryTransforms** (155 lines)
- Territory projection management
- Translation and scale controls
- Reset functions
- Empty state logic: shouldShowEmptyState computed (determines when to show "no territories" alert)
- Used by: TerritoryControls.vue

**useTerritoryParameters** (72 lines)
- Territory-specific parameter management for custom composite mode
- Encapsulates parameter state, validation, and inheritance logic
- Integrates with parameter store for reactive parameter updates
- Provides parameter constraints and validation results by projection family
- Used by: TerritoryParameterControls.vue

**useViewState** (110 lines) - NEW
- View mode boolean flags for template readability
- Card UI helpers (title, icon)
- Compound visibility conditions
- Exports: isCompositeMode, isCompositeCustomMode, isCompositeExistingMode, isSplitMode, isUnifiedMode
- Exports: cardTitle, cardIcon, shouldShowRightSidebar, shouldShowProjectionParams, shouldShowTerritoryControls
- Tests: 13 tests (100% passing)
- Used by: MapView.vue, DisplayOptionsSection.vue
- Pattern: Wraps configStore.viewMode checks with semantic computed properties

**useProjectionRecommendations** (78 lines)
- Projection recommendation badge system
- getBadge(): Returns Remix icon class (ri-star-fill, ri-star-line, ri-star-half-line)
- getCssClass(): Returns color class (text-success, text-info, text-base-content)
- getTooltip(): Returns localized recommendation reason
- getRecommendation(): Returns full recommendation object
- Used by: ProjectionDropdown.vue

**useTerritoryCursor** (477 lines)
- Territory drag-to-move functionality for composite-custom mode with D3.js integration
- Pure 1:1 cursor movement: Direct cursor delta to territory translation offset without scaling factors
- D3 DOM manipulation: Uses D3 selections for all SVG element interaction and styling
- Visual feedback system: updateTerritoryVisualFeedback() with hover/drag states using D3 styling
- Temporary border creation: createTemporaryBorder() generates borders when composition borders disabled
- Smart border detection: Detects existing borders vs. creating temporary ones for consistent UX
- D3-based overlay system: createBorderZoneOverlays() uses D3 data binding for interactive zones
- Mouse event handling: startDrag(), handleMouseMove(), stopDrag() with direct coordinate application
- Territory validation: isTerritoryDraggable() prevents mainland territory dragging
- Cursor management: getCursorStyle() provides grab/grabbing feedback
- Tooltip interference prevention: disableTooltipPointerEvents() using D3 selections and MutationObserver
- Clean resource management: Automatic cleanup of temporary borders and observers
- Used by: MapRenderer.vue for territory dragging interaction

**useUrlState** (220 lines)
- URL state serialization/deserialization for shareable links
- serializeState(): Encodes current configuration to URL query parameters
- deserializeState(): Restores configuration from URL parameters
- updateUrl(): Updates browser URL with current state
- restoreFromUrl(): Restores state from URL on page load
- shareableUrl: Computed property with full shareable URL
- copyShareableUrl(): Copies URL to clipboard
- enableAutoSync(): Optional automatic URL syncing on state changes
- Territory settings optimization: Only includes values different from atlas-specific defaults
- Comprehensive test suite: 11 tests covering serialization round-trips, edge cases, malformed input
- Used by: MapView.vue (restoration), ShareButton.vue (URL generation)

### Validation
**useProjectionValidation** (148 lines)
- Projection selection validation
- Warning generation
- Validation state management

## State Management

### configStore (357 lines)
**Domain**: Configuration state and UI control
**Responsibilities**:
- Atlas selection (current atlas, region, territories)
- View mode (composite, split, unified)
- Projection mode (existing, custom)
- Projection parameter delegation to parameterStore (setCustomRotate, setCustomCenter, etc.)
- Projection control options (rotateLatitudeLocked, projectionFittingMode)
- Computed properties: effectiveProjectionParams merges atlas defaults with parameterStore.globalParameters
- Legacy parameter accessors via computed properties for backward compatibility
- Territory parameter initialization on atlas change via AtlasCoordinator
- Loads preset parameters into parameter store
**Used by**: All configuration components, MapRenderer, TerritoryControls

### geoDataStore (215 lines)
**Domain**: Geographic data and rendering coordination
**Responsibilities**:
- GeoJSON data caching
- Territory data management
- Loading states
- Cartographer initialization with parameter provider injection
- Parameter provider adapter for connecting parameter store to rendering
**Used by**: MapRenderer, data loading composables

### ui.ts (81 lines)
**Domain**: UI state
**Responsibilities**:
- Theme management (light/dark)
- Display toggles (graticule, sphere, composition borders, map limits)
  - showGraticule: Display coordinate grid lines
  - showSphere: Display sphere outline
  - showCompositionBorders: Display territory region borders (composite views only)
  - showMapLimits: Display viewport bounds rectangle
**Used by**: ThemeSelector, DisplayOptionsSection, MapRenderer

### territory.ts (57 lines)
**Domain**: Territory state
**Responsibilities**:
- Territory projections
- Territory translations (x, y)
- Territory scales
- Initialization and reset
**Used by**: TerritoryControls, useTerritoryTransforms

### parameterStore (295 lines)
**Domain**: Projection parameter management
**Responsibilities**:
- Global parameter state management
- Territory-specific parameter overrides
- Parameter inheritance and effective parameter resolution (territory > global > atlas > default)
- Parameter validation with constraint checking (validates only relevant parameters per projection family)
- Reactive version tracking via territoryParametersVersion for triggering re-renders
- Integration with ProjectionParameterManager and UnifiedParameterConstraints services
- Support for all projection families with dynamic constraint resolution
- Provides ProjectionParameterProvider interface for rendering integration
**Used by**: TerritoryParameterControls, useTerritoryParameters, MapRenderer (watches version), geoDataStore (parameter provider)

## Data Flow

```
User Action (Template)
    ↓
v-model / Event Handler
    ↓
Composable Logic (if needed)
    ↓
Store Action/Mutation
    ↓
Store State Change
    ↓
Watcher in Composable (useAtlasData)
    ↓
Service Call
    ↓
Store Update → Component Re-render
```

**Key Pattern**: Centralized data loading in useAtlasData composable with setupWatchers()

## Parameter Flow Architecture

### Parameter Store to Rendering Integration

```
Parameter Edit (TerritoryParameterControls)
    ↓
parameterStore.setTerritoryParameter()
    • Stores value
    • Increments territoryParametersVersion
    • Emits @parameter-changed event
    ↓                                    ↓
Event Handler                      MapRenderer Watch
(handleParameterChange)            (territoryParametersVersion)
    ↓                                    ↓
cartographer.updateTerritoryParameters() triggers renderMap()
    ↓
CompositeProjection.updateTerritoryParameters()
    • Calls parameterProvider.getEffectiveParameters()
    • Applies rotate/center/parallels to D3 projection
    • Sets compositeProjection = null (forces rebuild)
    ↓
renderMap() with updated projection
```

### Parameter Provider Pattern

**Purpose**: Connect parameter store to rendering without direct coupling

**Implementation**:
- `ProjectionParameterProvider` interface with `getEffectiveParameters(territoryCode)` method
- geoDataStore creates adapter connecting parameterStore to Cartographer
- Cartographer passes provider to CompositeProjection
- CompositeProjection uses provider in initialization and updates

**Benefits**:
- No circular dependencies
- Clean separation of concerns
- Testable via dependency injection
- Parameter inheritance handled by parameter store

## Type Safety

### vue-props.ts (130 lines)
Centralized prop type definitions:
- MapRendererProps
- ViewComponentProps
- TerritoryControlsProps
- ProjectionSelectorProps
- DisplayOptionsSectionProps
- All props include default values exported as constants

### composables.ts (240 lines)
Composable return type interfaces:
- LoadingState
- ProjectionConfig
- TerritoryConfig
- ViewModeConfig
- TerritoryTransforms
- AtlasData
- ProjectionFiltering

### Central Export
All types exported from `src/types/index.ts` for consistent imports.

## Testing

**Framework**: Vitest + @vue/test-utils
**Coverage**: 122 tests (100% passing)

### Test Files
- `src/components/__tests__/MapRenderer.spec.ts` (10 tests)
  - Props validation, rendering, store integration, computed properties
- `src/composables/__tests__/useProjectionConfig.spec.ts` (8 tests)
  - Projection helpers, i18n integration
- `src/composables/__tests__/useAtlasData.spec.ts` (13 tests)
  - Data loading orchestration, watchers, error handling

### Test Infrastructure
- i18n mocking with createI18n
- Store mocking with createPinia/setActivePinia
- withSetup() helper for composable testing with Vue context
- Promise rejection handling with .catch(() => {})

## Patterns

### Composition API
- All components use `<script setup lang="ts">`
- Logic extracted to composables
- Props defined with defineProps<Type>()
- Events defined with defineEmits<Type>()

### State Management
- Global state: Pinia stores
- Local state: component refs
- Derived state: computed properties
- Store abstraction: composables wrap store access

### Component Design
- Single Responsibility Principle
- Props down, events up
- Composition over inheritance
- Templates under 100 lines

### Code Organization
- Feature-based grouping (composables/, stores/, components/ui/)
- Co-located tests (__tests__ folders)
- Centralized types (src/types/)
- Average component size: 70 lines

## Performance

### Current Optimizations
- Watchers centralized in useAtlasData.setupWatchers()
- Loading state with withMinLoadingTime()
- Shallow component hierarchy
- Composables enable code splitting

### Future Opportunities
- Virtual scrolling for large territory lists
- v-memo for static map content
- Lazy loading for ProjectionSelector
- shallowRef for large GeoJSON objects
- Computed property memoization

## Integration Points

### Services
Components never call services directly. Flow:
1. Component action
2. Store mutation
3. Watcher in useAtlasData
4. Service call
5. Store update
6. Component re-render

### D3/Observable Plot
- MapRenderer.vue owns D3 integration
- CartographerService coordinates rendering
- Services handle D3 projection creation

### I18n
- Vue I18n plugin for translations
- useI18n() composable in components
- Locale files: src/i18n/locales/en.json, fr.json

## Conditional Rendering Patterns

### Template Readability Guidelines

**Pattern**: Extract complex conditionals into computed properties
**Rationale**: Improves template readability and maintainability

**Before** (inline conditionals):
```vue
<CardContainer
  v-show="(
    configStore.viewMode === 'unified'
    || configStore.viewMode === 'composite-existing'
    || (configStore.viewMode === 'split' && !configStore.showIndividualProjectionSelectors)
    || configStore.showProjectionSelector
    || configStore.showIndividualProjectionSelectors
  )"
>
```

**After** (composable with semantic flags):
```vue
<CardContainer v-show="shouldShowRightSidebar">
```

### Visibility Logic Architecture

**configStore**: Provides computed properties via ProjectionUIService
- `showProjectionSelector`, `showIndividualProjectionSelectors`, `showProjectionModeToggle`
- These delegate to ProjectionUIService.shouldShow*() methods
- Single source of truth for component visibility rules

**useViewState**: Provides view mode flags and UI helpers
- Boolean flags: `isCompositeMode`, `isSplitMode`, `isUnifiedMode`, etc.
- Compound conditions: `shouldShowRightSidebar`, `shouldShowProjectionParams`
- Card helpers: `cardTitle`, `cardIcon`
- Does NOT duplicate configStore logic

**Best Practice**: Use configStore.show* for component visibility, useViewState for view mode checks

## Related Documentation

- docs/architecture.llm.rxt - Overall architecture
- docs/services.llm.txt - Service layer
- docs/atlases.llm.txt - Atlas configuration
- docs/projections.llm.txt - Projection system
