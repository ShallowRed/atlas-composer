# Service Layer Architecture

## Overview
The service layer contains business logic extracted from Vue components and Pinia stores.
Services are organized by concern into subdirectories: atlas/, data/, projection/, rendering/, export/.
Services follow two main patterns: instance-based (for stateful operations) and static (for pure functions).

## Service Patterns

### Instance-Based Pattern
Used when service maintains state, requires initialization, or represents domain objects.

**Characteristics**:
- Has private state (properties)
- Requires instantiation with `new`
- May have complex initialization
- Often caches data or configuration

**Use Cases**:
- Service holds configuration or loaded data
- Service coordinates multiple stateful dependencies
- Service represents a domain object with behavior
- Multiple instances with different configurations needed

**Examples**: GeoDataService (caching), CompositeProjection (domain object), Cartographer (orchestrator)

### Static Pattern
Used when service provides pure transformations, utility functions, or stateless orchestration.

**Characteristics**:
- No instance state
- All methods are static
- Pure functions or stateless coordinators
- Testable without instantiation

**Use Cases**:
- Pure data transformations
- Stateless business rule evaluation
- Orchestration of other services
- Utility calculations
- Factory with singleton caching

**Examples**: TerritoryFilterService (pure functions), AtlasCoordinator (orchestration), MapOverlayService (utilities)

### Pattern Decision Guide
- **Need state?** → Instance pattern
- **Pure function?** → Static pattern
- **Orchestration without state?** → Static pattern
- **Domain object with behavior?** → Instance pattern
- **Factory with caching?** → Static pattern with instance cache
- **Strategy pattern?** → Instance strategies with static coordinator

## Atlas Services (src/services/atlas/)

### AtlasPatternService
Pattern detection and behavioral decisions for different atlas types.
- `isSingleFocus()` - Check if atlas has single mainland
- `isEqualMembers()` - Check if atlas has equal member states
- `supportsSplitView()` - Check if split view is supported
- `getDefaultViewMode()` - Get recommended view mode
- `getPrimaryTerritoryRole()` - Determine mainland vs member role

### AtlasCoordinator
Orchestrates atlas changes and configuration updates.
Loads presets automatically when defaultPreset is configured.
Extracts territory-specific projection parameters from presets for rendering.
- `handleAtlasChange()` - Coordinate all updates when changing atlas (async - loads preset if available)
- Returns territoryParameters map in AtlasChangeResult for parameter store initialization
- `getInitialConfiguration()` - Build initial config for atlas (async)

### TerritoryDefaultsService
Initialize territory projections, translations, and scales.
- `initializeAll()` - Initialize all territory defaults

### PresetLoader
Loads preset composite projection configurations from configs/presets/ directory.
Static service providing preset loading and validation.
- `loadPreset()` - Load and validate preset file (async)
- `convertToDefaults()` - Convert preset to TerritoryDefaults format (projections, translations, scales)
- `extractTerritoryParameters()` - Extract projection parameters (rotate, center, parallels) from preset
- `validatePreset()` - Validate preset configuration
- `listAvailablePresets()` - List available presets (placeholder)

Delegates validation to CompositeImportService for consistency.
Extracts both layout properties (translation/scale) and projection parameters (rotate/center/parallels) separately.

### AtlasMetadataService
Provides clean API for accessing atlas-level projection metadata from preset files.
Static service with metadata caching for performance.
- `getAtlasMetadata()` - Get complete atlas metadata from presets (async)
- `getCompositeProjections()` - Get composite projection configurations (async)
- `getProjectionPreferences()` - Get projection preferences (async)
- `getProjectionParameters()` - Get projection parameters (async)
- `getMapDisplayDefaults()` - Get map display defaults (async)
- `clearCache()` - Clear metadata cache

Uses PresetLoader internally, provides fallback defaults for atlases without presets.

### AtlasService
Atlas-aware facade for accessing territory data and configuration.
Instance-based service providing unified API for components.
- `getTerritories()` - Get filtered/grouped territories
- `getTerritoryModes()` - Get available display modes
- `getTerritoryGroups()` - Get territory groupings
- `getProjectionParams()` - Get projection parameters (ProjectionParameters format)

## Data Services (src/services/data/)

### TerritoryDataLoader
Strategy pattern for loading territory data based on atlas pattern.
- `loadTerritoryData()` - Load data using appropriate strategy
Strategies: SingleFocusLoadStrategy, EqualMembersLoadStrategy

### TerritoryFilterService
Filter and group territories based on display modes.
- `filterTerritories()` - Filter territories by mode
- `groupByRegion()` - Group territories by region

### GeoDataService
Geographic data loading and processing from TopoJSON sources.
Instance-based service managing territory data cache.
- `loadData()` - Load TopoJSON and metadata
- `getAllTerritoriesGeoData()` - Get all territory data
- `getTerritoriesGeoData()` - Get filtered territory data
- `getTerritoryInfo()` - Get territory metadata
- `calculateBounds()` - Calculate geographic bounds

## Projection Services (src/services/projection/)

### ProjectionUIService
Projection grouping and UI visibility logic.
- `getProjectionGroups()` - Group projections by category
- `shouldShowProjectionSelector()` - Visibility for projection selector
- `shouldShowProjectionModeSelector()` - Visibility for mode selector
- `shouldShowCompositeProjectionSelector()` - Visibility for composite selector

### ProjectionService
Projection creation and management using factory/registry pattern.
Instance-based service with region-specific parameters.
- `setProjectionParams()` - Set region parameters
- `setFittingMode()` - Set auto or manual fitting mode
- `getProjection()` - Create projection using factory with dynamic parameter application
- `getAvailableProjections()` - Get filtered projections
- `groupProjectionsByCategory()` - Group projections
- `recommendProjection()` - Get projection recommendation

**Parameter Application Strategy**:
- Azimuthal projections: Uses rotation parameters for positioning
- Conic projections: Uses center (as rotation) in auto mode, direct center in manual mode
- Cylindrical/Pseudocylindrical: Uses rotation parameters
- Domain fitting (auto mode): Observable Plot's `fitExtent` calculates scale automatically
- Manual mode: User controls scale and center directly

### CompositeProjection
Custom composite projection with manual territory positioning.
Instance-based service managing sub-projections in final screen coordinates.
Supports parameter provider pattern for dynamic projection parameter updates.

**Constructor**:
- Accepts optional `ProjectionParameterProvider` for dependency injection
- Accepts optional `referenceScale` parameter from preset configuration
- Accepts optional `canvasDimensions` parameter from preset configuration
- Enables dynamic parameter updates from parameter store without direct coupling

**Core Methods**:
- `initialize()` - Initialize sub-projections with base settings (uses parameter provider if available)
- `build()` - Build composite projection with translate() applied to all sub-projections
- `updateTerritoryProjection()` - Change territory projection type
- `updateTerritoryParameters()` - Update projection parameters (rotate, center, parallels, scale, translate, precision) for a territory
- `updateReferenceScale()` - Update reference scale and recalculate all territory scales dynamically
- `updateTranslationOffset()` - Set territory position offset
- `updateScale()` - Set territory scale multiplier
- `getCompositionBorders()` - Get projected border rectangles for visualization
- `exportConfig()` - Export configuration as JSON

**Dynamic Scale Updates**:
The `updateReferenceScale()` method recalculates scales for all sub-projections without rebuilding:
- Iterates through all sub-projections
- Calculates new scale as: `referenceScale × scaleMultiplier`
- Applies scale directly to D3 projection
- Updates baseScale metadata for each sub-projection
- Forces composite projection rebuild by setting `compositeProjection = null`
- Enables smooth reference scale slider updates without flickering

**Parameter Integration**:
- `getParametersForTerritory()` - Merges config parameters with dynamic parameters from provider
- Uses nullish coalescing (`??`) to properly handle arrays and zero values
- Dynamic parameters take precedence over static config values
- `updateTerritoryParameters()` applies all supported parameters including scale, which integrates with territory scale multipliers

**Scale Parameter Handling**:
- Reference scale parameter: Base scale from preset configuration (defaults: 2700 for single-focus, 200 for equal-members)
- Territory scale multiplier (regular Scale controls): Multiplies reference scale (0.5×-2.0× range)  
- Final scale = reference scale × territory multiplier
- Reference scale parameter sourced from preset configuration, not atlas configuration

**Coordinate Space**:
Sub-projections have translate() applied during build(), so projected coordinates are in final screen space. The getCompositionBorders() method projects geographic bounds directly without adding additional translation offsets.

**Invert Method**:
Uses pure D3 projection.invert() approach without manual coordinate adjustments. Each sub-projection's invert method handles the translate() transformation internally, ensuring accurate coordinate conversion for territory boundary detection.

## Parameter Management Services (src/services/parameters/)

### Unified Parameter Registry System
Central registry-based parameter management with complete metadata, validation, and type safety.
Replaces previous constraint systems with a unified, registry-driven approach.

### ParameterRegistry (src/core/parameters/parameter-registry.ts)
Core registry service providing parameter definitions, metadata, and validation.
Singleton pattern with complete parameter lifecycle management.

**Parameter Definition Management**:
- `register()` - Register parameter definition with metadata, constraints, and validation
- `get()` - Get parameter definition by key with full metadata
- `validate()` - Validate parameter value using registry constraints
- `getConstraints()` - Get validation constraints for parameter
- `getDefault()` - Get default value with territory context support

**Metadata System**:
- Complete parameter metadata (displayName, description, unit, type)
- Projection family relevance (CYLINDRICAL, CONIC, AZIMUTHAL, COMPOSITE, OTHER)
- Data flow specification (preset, computed) and mutability flags
- Export control (exportable, requiresPreset) for serialization
- Type-safe constraints with range validation and custom validation functions

**Registry Coverage**:
- All projection parameters: center, rotate, parallels, translate, clipAngle, precision
- Scale parameter: scaleMultiplier with appropriate constraints
- Type-safe parameter constraints with family-specific relevance
- Comprehensive validation with contextual error messages

### ProjectionParameterManager (src/services/parameters/projection-parameter-manager.ts)
Business logic service for parameter management operations with unified ProjectionParameters format.
Instance-based service integrating with parameter registry for validation and state management.

**Unified Parameter Format**:
Uses ProjectionParameters throughout for consistent parameter handling.
All parameters use array format: center[lon, lat], rotate[lon, lat], parallels[south, north].
No legacy format conversions - single format end-to-end.

**Parameter State Management**:
- `setAtlasParameters()` - Set atlas-level ProjectionParameters
- `getGlobalParameters()` - Get global parameter state
- `setGlobalParameter()` - Set global parameter with registry validation
- `getTerritoryParameters()` - Get territory-specific parameter overrides
- `setTerritoryParameter()` - Set territory parameter with registry validation
- `getEffectiveParameters()` - Resolve parameters with inheritance (territory > global > atlas > registry defaults)
- `clearTerritoryOverride()` - Remove territory-specific parameter override

**Registry Integration**:
- `validateParameter()` - Validate parameter using registry constraints
- `validateTerritoryParameters()` - Validate all territory parameters
- `getParameterConstraints()` - Get registry-based constraint definitions
- `isParameterRelevant()` - Check parameter relevance for projection family
- Parameter inheritance with registry defaults as final fallback

**Event System**:
- Parameter change events with territory context
- Validation error events with registry-based error messages  
- Territory parameter lifecycle events (set, clear, validate)

### Parameter System Integration
The parameter store integrates directly with the unified parameter registry system.
All constraint resolution, validation, and parameter management uses ParameterRegistry.

**Parameter Store Integration**:
- `getParameterConstraints()` - Family-specific constraint adapter using ParameterRegistry
- `isParameterRelevant()` - Direct registry relevance checking
- `validateParameter()` - Registry-based single parameter validation
- `validateParameterSet()` - Batch validation using registry constraints

**Unified System Benefits**:
- Single source of truth through ParameterRegistry
- Family-specific constraints with comprehensive validation
- Clean parameter system with only current parameters
- Consistent validation across stores, UI, presets, and export systems
- Type-safe parameter definitions with metadata

## Export/Import Services (src/services/export/)

### CompositeExportService
Orchestrates export of composite projection configurations.
Static methods for configuration serialization and code generation.

**Export Methods**:
- `exportToJSON()` - Serialize projection to ExportedCompositeConfig
- `generateCode()` - Generate code using CodeGenerator
- `validateExportedConfig()` - Validate exported configuration

**Configuration Format**:
- `version` - Schema version (currently '1.0')
- `metadata` - Atlas info, export date, creator
- `pattern` - Atlas pattern (single-focus/equal-members)
- `territories[]` - Array of territory configurations
  - `code, name, role` - Territory identification
  - `projectionId, projectionFamily` - Projection info
  - `parameters` - All projection parameters (center, rotate, parallels, scaleMultiplier)
  - `layout` - Territory positioning (translateOffset, clipExtent)
  - `bounds` - Geographic bounds [[minLon, minLat], [maxLon, maxLat]]

### CompositeImportService
Re-imports exported configurations with validation, automatic version migration, and type safety.
Static methods for JSON parsing and store application.

**Import Methods**:
- `importFromJSON()` - Parse and validate JSON string
- `importFromFile()` - Import from File object (browser File API)
- `checkAtlasCompatibility()` - Check atlas ID compatibility
- `applyToStores()` - Apply configuration to stores (type-safe)

**Import Flow**:
1. Parse JSON string
2. Check version and migrate automatically if needed (via ConfigMigrator)
3. Validate structure (required fields, data types)
4. Check atlas compatibility
5. Return `{ success, config?, errors[], warnings[], migrated?, fromVersion? }`

**Application Flow**:
1. **FIRST**: Apply global preset parameters to configStore
   - Apply referenceScale if present
   - Apply canvasDimensions if present
2. **SECOND**: Set baseScale values in CompositeProjection
3. **THIRD**: Apply territory configurations
   - Apply projection to each territory via CompositeProjection service
   - Apply scale multiplier to parameter store
   - Apply translation offset to territory store
4. **FOURTH**: Sync final values and maintain state consistency

**Type Safety**:
- Replaced all `any` types with proper store types

**Global Parameter Handling**:
Global parameters (referenceScale, canvasDimensions) are applied first before territory-specific settings to ensure correct base values for subsequent calculations.

### ConfigMigrator
Handles automatic migration of exported configurations between schema versions.
Static methods for version detection, migration chain execution, and validation.

**Current Version**: `1.0`

**Migration Methods**:
- `needsMigration()` - Check if config needs migration to current version
- `canMigrate()` - Check if migration is possible (version supported)
- `migrateToCurrentVersion()` - Execute migration chain
- `isCurrentVersion()` - Check if config is already current version
- `compareVersions()` - Compare two version strings

**Migration Architecture**:
- Plugin-based chain (v1.0 → v1.1 → v1.2)
- Pure functions with no side effects
- Automatic integration in import flow
- Detailed logging with messages, errors, warnings

**Adding New Versions**:
Add migration function and update chain in `performMigrationChain()`
- Uses `ReturnType<typeof useConfigStore>` pattern
- Proper CompositeProjection API: `updateTerritoryProjection()`
- Store methods: `setTerritoryProjection`, `setTerritoryTranslation`
- Parameter store methods: `setTerritoryParameter(code, 'scaleMultiplier', value)`

### CodeGenerator
Generates ready-to-use code in multiple formats.
Static methods for D3.js (JS/TS) and Observable Plot code generation.

**Code Formats**:
- D3 JavaScript - Standalone projection function
- D3 TypeScript - With full type annotations
- Observable Plot - Plot-compatible projection

**Generated Code Pattern**:
```javascript
import { geoConicConformal } from 'd3-geo'
import { loadCompositeProjection, registerProjection } from '@atlas-composer/projection-loader'

export function create[Atlas]Projection() {
  registerProjection('projection-id', () => geoProjectionFunction())
  const config = { /* embedded JSON */ }
  return loadCompositeProjection(config, { width: 800, height: 600 })
}
```

**Features**:
- Uses `@atlas-composer/projection-loader` NPM package
- Embeds full configuration as JSON
- Includes usage examples (optional)
- Includes header comments with metadata
- Number precision: 6 decimals for all coordinates

### StandaloneProjectionLoader
Core loader implementation (copied to NPM package).
Zero-dependency module for loading exported configurations.

**Features**:
- Plugin architecture - users register projection factories
- Stream multiplexing for routing geometry to sub-projections
- D3 stream protocol compliance
- Geographic bounds-based routing

**Public API**:
- `loadCompositeProjection(config, options)` - Main loader function
- `registerProjection(id, factory)` - Register projection factory
- `clearProjections()` - Clear all registered projections

## Rendering Services (src/services/rendering/)

### MapSizeCalculator
Calculate map dimensions with configurable defaults.
- `calculateSize()` - Calculate map size
- `calculateProportionalSize()` - Calculate proportional size

### InsetCalculator
Centralized service for calculating Observable Plot inset values.
Static methods providing single source of truth for inset calculations:
- `calculateInset(viewMode, isMainland?)` - Calculate inset for any view mode
- `calculateSimpleInset(isMainland)` - Calculate inset for simple rendering

**Purpose**: Ensures consistent padding between Observable Plot rendering (graticules, sphere, geography) and overlay rendering (borders, limits). Observable Plot applies inset by adjusting render dimensions and offsetting content.

### MapOverlayService
Render map overlays (composition borders and map limits) using D3 selection API.
Static methods for SVG overlay rendering:
- `applyOverlays()` - Apply overlays to rendered SVG map (uses inset from config)
- `computeSceneBBox()` - Compute viewport-based bounding box with insets
- `boundsToRect()` - Convert projection bounds to SVG rectangle
- `unionRect()` - Compute union of rectangles for accumulated bounds
- `createCompositeBorderPath()` - Create border path for composite projections
- `appendRectOverlay()` - Append dashed rectangle overlay to SVG

Overlay Features:
- **Composition Borders**: Dashed borders around territory regions (dash: 8 4, width: 1.25)
- **Map Limits**: Dashed border around entire rendered content (dash: 4 3, width: 1.5)
- Viewport-based bounds calculation using SVG dimensions and insets
- Receives inset value from OverlayConfig (calculated by InsetCalculator in coordinator)
- Automatic overlay group management (removes empty groups)

### CompositeSettingsBuilder
Build custom composite settings from configuration.
- `extractTerritoryCodes()` - Extract territory codes from config
- `buildTerritoryProjections()` - Build projections map
- `buildSettings()` - Build complete settings

### MapRenderCoordinator
Coordinate map rendering by building options and orchestrating services.
- `renderSimpleMap()` - Render simple territory map
- `renderCompositeMap()` - Render composite map
- `applyOverlays()` - Apply overlays to rendered map (calculates inset using InsetCalculator and passes to MapOverlayService)

### BorderRenderer
Border rendering strategies for different modes.
Classes: CustomCompositeBorderRenderer, ExistingCompositeBorderRenderer
Currently deferred integration, not fully used.

### CartographerService
Main rendering coordinator with unified API and D3.js integration.
Instance-based service orchestrating projection, geo-data, and rendering.
Integrates with parameter provider for dynamic projection parameter updates.

**Constructor**:
- Accepts optional `ProjectionParameterProvider` parameter
- Passes provider to CompositeProjection for parameter integration

**Rendering Methods**:
- `render()` - Unified rendering API (simple/composite modes)
- `renderSimple()` - Simple projection rendering
- `renderCustomComposite()` - Custom composite rendering (uses InsetCalculator for Plot inset)
- `renderProjectionComposite()` - Projection-based composite (uses InsetCalculator for Plot inset)
- `createPlot()` - Common Plot creation logic
- `addTerritoryAttributes()` - Static method using D3 selections to add data-territory attributes to SVG paths

**Parameter Update Methods**:
- `updateProjectionParams()` - Update global projection parameters
- `updateFittingMode()` - Update projection fitting mode
- `updateTerritoryParameters()` - Update territory-specific projection parameters including scale (triggers projection rebuild)
- `updateCanvasDimensions()` - Update canvas dimensions in projection service
- `updateReferenceScale()` - Update reference scale in CompositeProjection and recalculate all territory scales

**Global Parameter Management**:
Global parameters (referenceScale, canvasDimensions) are updated dynamically through dedicated methods:
- `updateCanvasDimensions()` passes dimensions to ProjectionService for coordinate calculations
- `updateReferenceScale()` triggers recalculation of all territory scales in CompositeProjection
- Both methods enable reactive updates without full reinitialization
- Called by MapRenderer watchers when configStore values change

**Territory Attributes**:
  - Uses D3 pathSelection.each() for efficient DOM traversal
  - Leverages Observable Plot bound data (__data__) for territory identification
  - Fallback indexing for edge cases where bound data unavailable
  - Debug logging for development troubleshooting

### CartographerFactory
Factory for creating region-specific Cartographer instances.
Static factory pattern with instance caching.
- `create()` - Create or retrieve cached Cartographer
- `getInstance()` - Get cached instance

## Export Services (src/services/export/)

### CompositeExportService
Export composite projection configurations to JSON format.
Static methods for configuration serialization:
- `exportToJSON()` - Serialize CompositeProjection to ExportedCompositeConfig
- `validateExportedConfig()` - Validate exported configuration structure
- `exportToFile()` - Create downloadable JSON file
- Applies rounding to all numeric values (6 decimal places)
- Includes metadata (atlasId, exportDate, version)
- Exports territories with projection parameters, layout, and bounds

### CompositeImportService  
Import and restore composite projection configurations from JSON.
Static methods for configuration import:
- `importFromJSON()` - Parse and validate JSON string
- `importFromFile()` - Handle File API objects
- `checkAtlasCompatibility()` - Validate atlas ID matching
- `applyToStores()` - Apply imported config to stores and CompositeProjection
- Validates required fields and data integrity
- Warns if atlas mismatch but allows import

### CodeGenerator
Generate standalone executable code from exported configurations.
Supports multiple formats and languages:
- `generate()` - Main entry point with format/language options
- `generateD3JavaScript()` - D3.js JavaScript code with registration
- `generateD3TypeScript()` - D3.js TypeScript code with type annotations
- `generatePlotCode()` - Observable Plot code with registration
- Implements D3 stream protocol with state machine for geometry routing
- Geographic bounds-based stream multiplexing
- Applies number rounding for floating-point precision (6 decimals)
- Generated code includes projection registration examples (80-92% shorter)

See docs/export.llm.txt for detailed D3 stream protocol implementation.

**Note**: Standalone projection loader implementation moved to `packages/projection-loader/`.
Code generator references the published package `@atlas-composer/projection-loader` in generated code.
See docs/export.llm.txt for loader API and architecture details.

Loading API:
- `loadCompositeProjection(config, options)` - Create projection from config
- `validateConfig(config)` - Validate configuration structure

Features:
- Zero dependencies (no d3-geo imports)
- Plugin architecture with runtime registry
- Self-contained TypeScript types (ProjectionLike, ProjectionFactory, StreamLike)
- D3 stream multiplexing for geometry routing
- Geographic bounds-based territory selection
- Debug mode for logging territory selection
- Supports any projection (D3, Proj4, custom)
- Tree-shakeable imports
- Bundle size: ~6KB (vs 100KB with bundled dependencies)

Optional D3 Helpers (d3-projection-helpers.ts):
- Pre-configured D3 projection factories
- Tree-shakeable individual exports
- Bulk registration helper
- Keeps D3 dependencies separate from main loader
Usage: Standalone D3 projects, Observable notebooks, Node.js rendering

## Design Patterns

### Static Methods
Export/import services use static methods for:
- Testability without Vue context
- Functional programming style
- No state management in services

### Instance-Based Services
Existing services use instance pattern for:
- Stateful operations (caching, configuration)
- Complex initialization requirements
- Legacy compatibility

### Strategy Pattern
TerritoryDataLoader uses strategies for pattern-specific loading logic.

### Coordinator Pattern
AtlasCoordinator and MapRenderCoordinator orchestrate complex multi-step operations.

### Facade Pattern
AtlasService provides simplified API hiding complexity from components.

### Factory Pattern
CartographerFactory and ProjectionFactory create configured instances.

## Usage Guidelines

1. Import services from organized subdirectories
2. Use static methods for stateless operations
3. Use instance methods for stateful operations
4. Services handle business logic, not presentation
5. Components coordinate service calls
6. Stores use services for complex operations
7. Keep services focused on single responsibility

## Benefits

- Clear separation of concerns by domain
- Testable without Vue dependencies
- Reusable across components
- Consistent patterns and conventions
- Easy to navigate and discover
- Reduced component complexity
