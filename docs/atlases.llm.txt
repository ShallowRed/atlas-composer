# Atlas System Quick Reference

## Core Architecture

**Registry Pattern**: Auto-discovers all configs from `configs/` folder
**Adapter Pattern**: Transforms JSON → TypeScript configs
**Zero Code Changes**: Add new atlas by creating JSON file only
**Category Grouping**: Atlases are grouped by geographic scope in UI dropdowns

## Atlas Categories

Atlases are organized into three categories for UI grouping:

| Category | Description | Examples |
|----------|-------------|----------|
| `country` | Individual nation-states | France, Portugal, Spain, USA, Netherlands, Japan, Ecuador, Chile, Malaysia, Equatorial Guinea, United Kingdom, Denmark |
| `region` | Regional groups, unions, alliances | European Union |
| `world` | Global/world atlases | World |

Categories are optional in config - defaults to `country` if not specified.
Groups display in order: Country → Region & Union → World.

## Directory Structure

```
configs/
├── schema.json        # JSON Schema validation
├── france.json        # Atlas configurations
├── portugal.json
└── eu.json

src/core/atlases/
├── loader.ts          # JSON → TypeScript adapter
├── registry.ts        # Singleton auto-discovery
├── utils.ts           # Territory helpers
└── constants.ts       # Defaults

src/public/data/
├── {atlas}-territories-{res}.json  # TopoJSON geometries
└── {atlas}-metadata-{res}.json     # Territory metadata
```

## Territory Patterns

### Pattern 1: Single-Focus (1 Primary + N Secondary)
**Pattern ID**: `single-focus`
**Examples**: France, Portugal, Netherlands, USA, Japan, Ecuador, Chile, Malaysia, Equatorial Guinea, United Kingdom, Denmark
**Structure**: Single primary territory + multiple secondary territories

```json
{
  "pattern": "single-focus",
  "territories": [
    {
      "role": "primary",
      "code": "FR-MET",
      "name": "France Métropolitaine"
    },
    {
      "role": "secondary",
      "code": "FR-GP",
      "name": "Guadeloupe"
    }
  ]
}
```

### Pattern 2: Equal-Members (N Equal Territories)
**Pattern ID**: `equal-members`
**Examples**: EU, World, ASEAN, Benelux
**Structure**: Multiple equal territories (no hierarchy)

```json
{
  "pattern": "equal-members",
  "territories": [
    {
      "role": "member",
      "code": "BE",
      "name": "Belgium"
    },
    {
      "role": "member",
      "code": "NL",
      "name": "Netherlands"
    }
  ]
}
```

### Pattern 3: Hierarchical (Future)
**Pattern ID**: `hierarchical`
**Status**: Reserved for future use
**Structure**: Complex multi-level territory relationships

## Territory Roles

- `primary` - Primary territory (for single-focus atlases)
- `secondary` - Distant/remote territory (for single-focus atlases)
- `member` - Equal member territory (for equal-members atlases like EU, world)
- `embedded` - Enclave/exclave within another territory

## View Modes

| Mode | Description | Use Case |
|------|-------------|----------|
| `split` | Separate maps per territory | Traditional atlases with distant territories |
| `composite-existing` | Pre-built D3 composite | France, Portugal, Spain |
| `composite-custom` | User-defined layout | Any atlas, full customization |
| `unified` | Single world map | Regional groups, geographic context |

## Minimal Config

```json
{
  "$schema": "./schema.json",
  "id": "atlas-id",
  "name": "Atlas Name",
  "category": "country",
  "pattern": "single-focus",
  "territories": [
    {
      "id": "250",
      "role": "primary",
      "code": "FR-MET",
      "name": "Territory Name",
      "center": [2.5, 46.5],
      "bounds": [[-5, 41], [10, 51]],
      "extraction": { "mainlandPolygon": 0 }
    }
  ]
}
```

## Complete Config Structure

```json
{
  "$schema": "./schema.json",
  "id": "atlas-id",
  "name": "Atlas Name",
  "description": "Brief description",
  "category": "country",
  "pattern": "single-focus",

  "viewModes": ["split", "composite-existing", "composite-custom", "unified"],
  "defaultViewMode": "composite-custom",

  "projectionPreferences": {
    "recommended": ["conic-conformal", "albers"],
    "default": {
      "mainland": "conic-conformal",
      "overseas": "mercator"
    },
    "prohibited": ["gnomonic", "orthographic"]
  },

  "territories": [/* territory objects */],

  "projection": {
    "center": { "longitude": 2.5, "latitude": 46.5 },
    "rotate": {
      "mainland": [-3, 0],
      "azimuthal": [-3, -46]
    },
    "parallels": { "conic": [45.9, 47.7] }
  },

  "modes": [
    {
      "id": "all-territories",
      "label": "All territories",
      "territories": ["FR-MET", "FR-GP", "FR-MQ"]
    }
  ],

  "groups": [
    {
      "id": "caribbean",
      "label": "Caribbean",
      "territories": ["FR-GP", "FR-MQ"]
    }
  ]
}
```

## Internationalization (i18n)

All user-facing text fields support both simple strings and i18n objects.

### Resolution Strategy

The loader (`src/core/atlases/loader.ts`) resolves i18n values during config loading:
1. Gets current locale from localStorage or browser (via `getCurrentLocale()`)
2. Resolves all i18n values to strings using `resolveI18nValue()`
3. Creates runtime configs with resolved strings

The resolution utility (`src/core/atlases/i18n-utils.ts`) provides:
- `resolveI18nValue(value, locale)` - Non-composable for services/loaders
- `useResolveI18nValue(value)` - Vue composable for components
- `getCurrentLocale()` - Gets locale from localStorage/browser

### Config Format

**Simple String** (fallback for all languages):
```json
{
  "name": "France",
  "description": "France métropolitaine et territoires d'outre-mer"
}
```

**i18n Object** (multi-language support):
```json
{
  "name": {
    "en": "France",
    "fr": "France"
  },
  "description": {
    "en": "Metropolitan France and overseas territories",
    "fr": "France métropolitaine et territoires d'outre-mer"
  }
}
```

### Supported Fields

- **Atlas level**: `name`, `description`
- **Territory level**: `name`, `shortName`, `region`
- **Modes** (legacy): `label`
- **Territory Modes**: `name`
- **Groups**: `label`

### Resolution Rules

1. If value is a string → return as-is (fallback for all locales)
2. If value is an object → try current locale key
3. If current locale missing → fallback to `en`
4. If `en` missing → return first available value

### Type System

- `I18nValue` type: `string | Record<string, string>`
- TypeScript types in `types/atlas-config.ts` support both formats
- Loader transforms i18n values to resolved strings at load time
- Runtime configs contain only resolved strings (no i18n objects)

## Key Fields Reference

| Field | Required | Description |
|-------|----------|-------------|
| `$schema` | ✅ | Reference to schema.json |
| `id` | ✅ | Unique atlas identifier (kebab-case) |
| `name` | ✅ | Display name (string or i18n object) |
| `category` | ⏩ | Atlas category: `country`, `region`, or `world` (default: country) |
| `pattern` | ⏩ | Atlas pattern: `single-focus`, `equal-members`, or `hierarchical` (auto-detected if omitted) |
| `description` | ⏩ | Brief description (string or i18n object) |
| `viewModes` | ⏩ | Supported view modes (default: all) |
| `defaultViewMode` | ⏩ | Initial view mode (default: composite-custom) |
| `defaultPreset` | ⏩ | Default preset file to load (e.g., 'france-default') |
| `availablePresets` | ⏩ | List of preset files for UI selector |
| `projectionPreferences` | ⚠️ | Highly recommended for proper projections |
| `territories` | ✅ | Territory definitions (array) or "*" for all territories |
| `projection` | ⚠️ | Highly recommended projection parameters |
| `modes` | ⏩ | Territory selection presets |
| `groups` | ⏩ | Territory groupings |

## Preset System

**Purpose**: Provide high-quality default territory positioning for composite-custom mode

**Location**: `configs/presets/` directory

**Format**: ExportedCompositeConfig JSON (same as export/import format)

**Workflow**:
1. Atlas references preset via `defaultPreset` field (e.g., "france-default")
2. PresetLoader loads preset from `configs/presets/{preset-id}.json`
3. Preset provides default projections, translations, and scales for territories
4. Applied automatically on atlas initialization in composite-custom mode

**Benefits**:
- Users get professional defaults without manual adjustment
- Consistent layouts across sessions
- Easier onboarding for new users
- Presets can be shared and versioned

**Configuration**:
```json
{
  "defaultPreset": "france-default",
  "availablePresets": ["france-default", "france-compact"]
}
```

**Creating Presets**:
Presets are created by exporting manually-adjusted compositions from the running application.
See `configs/presets/README.md` for detailed instructions.

## Auto-Discovery Flow

1. **Build Time**: Vite glob imports scan `configs/*.json`
2. **Load Time**: Registry loads and validates each config
3. **Transform**: Loader adapts JSON to TypeScript interfaces
4. **Register**: Each atlas is registered by ID
5. **Ready**: Application can query registry for atlases

## Related Docs

- `add-new-atlas.llm.txt` - Step-by-step guide for adding new atlas
- `projections.llm.txt` - Projection system reference
- `scripts.llm.txt` - CLI tools for geodata preparation
- `export.llm.txt` - Export system and preset creation
