# Preset-Based Projection Configuration for All View Modes

## Current State Analysis

### How Projections Are Currently Selected

#### 1. **Composite-Custom Mode** ‚úÖ (Already Well-Designed)
**Current Implementation:**
- Uses JSON presets (`configs/presets/*.json`)
- Complete territory-level configuration
- Supports per-territory projection types, scales, offsets
- Parameters stored in ParameterStore
- Clean separation of concerns

**Example: `france-default.json`**
```json
{
  "referenceScale": 2700,
  "territories": {
    "FR-MET": {
      "projection": {
        "id": "conic-conformal",
        "parameters": {
          "rotate": [-3, -46.2],
          "parallels": [0, 60],
          "scaleMultiplier": 1.0
        }
      },
      "layout": {
        "translateOffset": [0, 0]
      }
    },
    "FR-GP": {
      "projection": {
        "id": "mercator",
        "parameters": {
          "scaleMultiplier": 0.6
        }
      },
      "layout": {
        "translateOffset": [-324, -37.8]
      }
    }
  }
}
```

#### 2. **Composite-Existing Mode** ‚ùå (Needs Improvement)
**Current Implementation:**
- Uses hardcoded d3-composite-projections
- Projection selected via `compositeProjection` store field
- No JSON configuration
- Limited to pre-built projections (conicConformalFrance, conicConformalPortugal, etc.)

**Problems:**
- No preset system for quick selection
- No way to save preferred scale adjustments
- Projection parameters are hardcoded in d3-composite-projections (intentional, should stay that way)

#### 3. **Unified Mode** ‚ùå (Needs Improvement)
**Current Implementation:**
- Single projection for entire atlas
- Projection selected via `selectedProjection` store field
- Parameters set via UI controls (rotate, parallels, center)
- No JSON configuration
- Parameters ephemeral (lost on reload)

**Problems:**
- No way to save projection configurations
- Can't share unified view setups
- Parameters are UI-only, not persisted
- No recommended defaults per atlas

#### 4. **Split Mode** ‚ùå (Needs Improvement)
**Current Implementation:**
- Always uses individual projections per territory
- Parameters set via UI controls
- No JSON configuration
- No persistence

**Problems:**
- Same as unified mode
- Individual projections must be configured every time
- No way to define optimal projections per territory
- No recommended defaults

## Proposed Architecture: Preset System with Separation of Concerns

### Core Concept

**Two distinct preset systems:**

1. **Composite-Custom Presets** (existing, independent):
   - Remain standalone, consumable by external apps
   - Current format unchanged
   - No dependency on other view modes
   - Primary feature with highest priority

2. **View Mode Presets** (new):
   - Separate preset files for unified/split/composite-existing modes
   - Lighter weight, simpler structure
   - Reference composite-custom presets when needed
   - Not mixed with composite-custom configurations

### Preset File Structures

#### 1. Composite-Custom Presets (Unchanged)

**Location**: `configs/presets/*.json`

```typescript
// types/preset.ts
export interface CompositeCustomPreset {
  id: string
  name: string
  description?: string
  referenceScale: number
  territories: Record<string, TerritoryProjectionConfig>
}
```

**Example: `france-default.json`** (NO CHANGES)
```json
{
  "id": "france-default",
  "name": "France - Projection composite",
  "referenceScale": 2700,
  "territories": {
    "FR-MET": {
      "projection": {
        "id": "conic-conformal",
        "parameters": {
          "rotate": [-3, -46.2],
          "parallels": [0, 60],
          "scaleMultiplier": 1.0
        }
      },
      "layout": { "translateOffset": [0, 0] }
    }
  }
}
```

#### 2. View Mode Presets (New)

**Location**: `configs/view-presets/*.json`

```typescript
// types/view-preset.ts
export interface ViewModePreset {
  id: string
  name: string
  description?: string
  atlasId: string
  viewMode: 'unified' | 'split' | 'composite-existing'
  
  // Configuration based on viewMode
  config: UnifiedConfig | SplitConfig | CompositeExistingConfig
}

export interface UnifiedConfig {
  projection: {
    id: string
    parameters: ProjectionParameters
  }
}

export interface SplitConfig {
  mainland: {
    projection: {
      id: string
      parameters: ProjectionParameters
    }
  }
  territories: Record<string, {
    projection: {
      id: string
      parameters: ProjectionParameters
    }
  }>
}

export interface CompositeExistingConfig {
  projectionId: string  // e.g., "conic-conformal-france"
  globalScale?: number  // Optional global scale adjustment (default: 1.0)
}
```

### Example Presets

#### 1. Composite-Custom Presets (Existing Format)

**`configs/presets/france-default.json`** (NO CHANGES)
```json
{
  "id": "france-default",
  "name": "France - Projection composite",
  "referenceScale": 2700,
  "territories": {
    "FR-MET": {
      "projection": {
        "id": "conic-conformal",
        "parameters": {
          "rotate": [-3, -46.2],
          "parallels": [0, 60],
          "scaleMultiplier": 1.0
        }
      },
      "layout": { "translateOffset": [0, 0] }
    },
    "FR-GP": {
      "projection": {
        "id": "mercator",
        "parameters": { "scaleMultiplier": 0.6 }
      },
      "layout": { "translateOffset": [-324, -37.8] }
    }
  }
}
```

#### 2. View Mode Presets (New)

**`configs/view-presets/france-unified-default.json`**
```json
{
  "id": "france-unified-default",
  "name": "France - Vue unifi√©e standard",
  "description": "Projection Natural Earth centr√©e sur la France",
  "atlasId": "france",
  "viewMode": "unified",
  "config": {
    "projection": {
      "id": "natural-earth",
      "parameters": {
        "center": [-10, 45],
        "scale": 1.0
      }
    }
  }
}
```

**`configs/view-presets/france-unified-europe.json`**
```json
{
  "id": "france-unified-europe",
  "name": "France - Vue europ√©enne",
  "description": "Projection azimutale centr√©e sur l'Europe",
  "atlasId": "france",
  "viewMode": "unified",
  "config": {
    "projection": {
      "id": "azimuthal-equal-area",
      "parameters": {
        "center": [10, 50],
        "rotate": [0, 0],
        "scale": 1.5
      }
    }
  }
}
```

**`configs/view-presets/france-split-default.json`**
```json
{
  "id": "france-split-default",
  "name": "France - Vue s√©par√©e",
  "description": "Projection adapt√©e √† chaque territoire",
  "atlasId": "france",
  "viewMode": "split",
  "config": {
    "mainland": {
      "projection": {
        "id": "conic-conformal",
        "parameters": {
          "rotate": [-3, -46.2],
          "parallels": [0, 60]
        }
      }
    },
    "territories": {
      "FR-GP": {
        "projection": {
          "id": "mercator",
          "parameters": { "center": [-61.5, 16.25] }
        }
      },
      "FR-MQ": {
        "projection": {
          "id": "mercator",
          "parameters": { "center": [-61.03, 14.67] }
          }
        }
      }
    }
  }
}
```

**`configs/view-presets/france-composite-existing.json`**
```json
{
  "id": "france-composite-existing",
  "name": "France - Composite d3 standard",
  "description": "Utilise la projection composite pr√©d√©finie de d3-composite-projections",
  "atlasId": "france",
  "viewMode": "composite-existing",
  "config": {
    "projectionId": "conic-conformal-france",
    "globalScale": 1.0
  }
}
```

**`configs/view-presets/france-composite-existing-large.json`**
```json
{
  "id": "france-composite-existing-large",
  "name": "France - Composite d3 agrandi",
  "description": "Version agrandie de la projection composite",
  "atlasId": "france",
  "viewMode": "composite-existing",
  "config": {
    "projectionId": "conic-conformal-france",
    "globalScale": 1.5
  }
}
```

### File Organization

```
configs/
  presets/                       # Composite-custom presets (unchanged)
    schema.json                  # Existing schema (NO CHANGES)
    france-default.json          # Composite-custom preset (NO CHANGES)
    france-nsp.json              # Composite-custom preset (NO CHANGES)
    france-test.json
    portugal-default.json
    eu-default.json
    usa-default.json
  
  view-presets/                  # NEW: View mode presets
    schema.json                  # New schema for view mode presets
    
    # France view presets
    france-unified-default.json
    france-unified-europe.json
    france-split-default.json
    france-composite-existing.json
    france-composite-existing-large.json
    
    # Portugal view presets
    portugal-unified-default.json
    portugal-split-default.json
    portugal-composite-existing.json
    
    # EU view presets
    eu-unified-default.json
    eu-split-default.json
```

**Key Points:**
- **Complete separation**: Composite-custom presets stay independent
- **No mixing**: View mode presets cannot define composite-custom configurations
- **External consumption**: Apps can use `configs/presets/*.json` without knowing about view-presets
- **Clean architecture**: Each preset type has its own schema and validation

## Implementation Strategy

### Phase 1: Create View Mode Preset System ‚úÖ

1. **Create new types** (`types/view-preset.ts`):
   - `ViewModePreset` interface
   - `UnifiedConfig`, `SplitConfig`, `CompositeExistingConfig` interfaces
   - Keep existing `types/preset.ts` unchanged

2. **Create view preset schema** (`configs/view-presets/schema.json`):
   - New schema specific to view mode presets
   - Validate viewMode field
   - Validate config matches viewMode type
   - Do NOT touch existing `configs/presets/schema.json`

3. **Create preset validation**:
   - Validate projection IDs exist in registry
   - Validate parameters match projection requirements
   - For composite-existing: validate globalScale is positive number
   - Separate validation logic from composite-custom presets

### Phase 2: View Mode Preset Loading Service üîÑ

**Create NEW `ViewPresetLoaderService`** (separate from existing PresetLoaderService):

```typescript
// services/presets/view-preset-loader-service.ts
export class ViewPresetLoaderService {
  /**
   * Load view mode preset
   * NOTE: Completely separate from composite-custom preset loading
   */
  static async loadViewPreset(
    atlasId: string,
    presetId: string
  ): Promise<ViewModePreset> {
    const response = await fetch(
      `/configs/view-presets/${atlasId}-${presetId}.json`
    )
    
    if (!response.ok) {
      throw new Error(`View preset not found: ${presetId}`)
    }
    
    const preset = await response.json()
    
    // Validate against view preset schema
    this.validateViewPreset(preset)
    
    return preset
  }
  
  /**
   * Get all available view presets for an atlas and view mode
   */
  static async getAvailableViewPresets(
    atlasId: string,
    viewMode: ViewMode
  ): Promise<ViewModePreset[]> {
    // Load view preset registry (list of available presets)
    const response = await fetch('/configs/view-presets/registry.json')
    const registry = await response.json()
    
    return registry.presets
      .filter((p: any) => p.atlasId === atlasId && p.viewMode === viewMode)
  }
  
  /**
   * Apply view preset configuration to stores
   */
  static applyViewPreset(preset: ViewModePreset) {
    const configStore = useConfigStore()
    const parameterStore = useParametersStore()
    
    switch (preset.viewMode) {
      case 'unified':
        this.applyUnifiedPreset(preset.config as UnifiedConfig)
        break
      case 'split':
        this.applySplitPreset(preset.config as SplitConfig)
        break
      case 'composite-existing':
        this.applyCompositeExistingPreset(preset.config as CompositeExistingConfig)
        break
    }
  }
  
  private static applyUnifiedPreset(config: UnifiedConfig) {
    const configStore = useConfigStore()
    const parameterStore = useParametersStore()
    
    configStore.selectedProjection = config.projection.id
    parameterStore.setGlobalParameters(config.projection.parameters)
  }
  
  private static applySplitPreset(config: SplitConfig) {
    const configStore = useConfigStore()
    const parameterStore = useParametersStore()
    
    // Apply mainland projection
    const mainlandCode = configStore.currentAtlas?.mainlandCode
    if (mainlandCode && config.mainland) {
      parameterStore.setTerritoryProjection(
        mainlandCode,
        config.mainland.projection.id,
        config.mainland.projection.parameters
      )
    }
    
    // Apply territory projections
    if (config.territories) {
      Object.entries(config.territories).forEach(([code, territoryConfig]) => {
        parameterStore.setTerritoryProjection(
          code,
          territoryConfig.projection.id,
          territoryConfig.projection.parameters
        )
      })
    }
  }
  
  private static applyCompositeExistingPreset(config: CompositeExistingConfig) {
    const configStore = useConfigStore()
    const uiStore = useUIStore()
    
    configStore.compositeProjection = config.projectionId
    
    // Apply global scale if specified
    if (config.globalScale !== undefined) {
      uiStore.globalScale = config.globalScale
    }
  }
}
```

**Keep existing `PresetLoaderService` unchanged** for composite-custom presets.

### Phase 3: Update Store & State Management üîÑ

**Config Store Changes:**

```typescript
// stores/config.ts
export const useConfigStore = defineStore('config', () => {
  // SEPARATE preset tracking for different systems
  const compositeCustomPreset = ref<string | null>(null)  // Existing
  const viewModePreset = ref<string | null>(null)         // New
  
  // Load composite-custom preset (existing, unchanged)
  async function loadCompositeCustomPreset(presetId: string) {
    // Existing implementation - NO CHANGES
    const preset = await PresetLoaderService.loadPreset(atlasId, presetId)
    compositeCustomPreset.value = presetId
    // ... existing logic
  }
  
  // NEW: Load view mode preset
  async function loadViewModePreset(presetId: string) {
    const preset = await ViewPresetLoaderService.loadViewPreset(
      selectedAtlas.value,
      presetId
    )
    
    // Validate preset matches current view mode
    if (preset.viewMode !== viewMode.value) {
      throw new Error(
        `Preset is for ${preset.viewMode} mode, but current mode is ${viewMode.value}`
      )
    }
    
    // Apply preset configuration
    ViewPresetLoaderService.applyViewPreset(preset)
    
    viewModePreset.value = presetId
  }
  
  // Clear view preset when switching view modes
  watch(viewMode, () => {
    viewModePreset.value = null
  })
  
  return {
    // Existing
    compositeCustomPreset,
    loadCompositeCustomPreset,
    
    // New
    viewModePreset,
    loadViewModePreset
  }
})
```

### Phase 4: UI Updates üîÑ

**Two Separate Preset Selectors:**

```vue
<!-- components/ui/presets/CompositeCustomPresetSelector.vue -->
<!-- EXISTING - NO CHANGES -->
<template>
  <DropdownControl
    v-if="configStore.viewMode === 'composite-custom'"
    v-model="configStore.compositeCustomPreset"
    :label="t('preset.compositeCustom.select')"
    icon="ri-file-settings-line"
    :options="compositeCustomPresets"
    @update:model-value="loadCompositeCustomPreset"
  />
</template>

<script setup lang="ts">
const compositeCustomPresets = computed(() => {
  // Load from configs/presets/*.json (existing)
  return PresetLoaderService.getAvailablePresets(configStore.selectedAtlas)
})

async function loadCompositeCustomPreset(presetId: string) {
  await configStore.loadCompositeCustomPreset(presetId)
}
</script>
```

```vue
<!-- components/ui/presets/ViewModePresetSelector.vue -->
<!-- NEW -->
<template>
  <DropdownControl
    v-if="showViewPresetSelector"
    v-model="configStore.viewModePreset"
    :label="t('preset.viewMode.select')"
    icon="ri-layout-line"
    :options="availableViewPresets"
    @update:model-value="loadViewPreset"
  />
</template>

<script setup lang="ts">
const showViewPresetSelector = computed(() => {
  // Show for unified, split, composite-existing
  return ['unified', 'split', 'composite-existing'].includes(configStore.viewMode)
})

const availableViewPresets = computed(() => {
  // Load from configs/view-presets/*.json
  return ViewPresetLoaderService.getAvailableViewPresets(
    configStore.selectedAtlas,
    configStore.viewMode
  )
})

async function loadViewPreset(presetId: string) {
  await configStore.loadViewModePreset(presetId)
}
</script>
```

**View Mode Selector:**

```vue
<!-- Shows preset availability for view modes (optional) -->
<DropdownControl
  v-model="configStore.viewMode"
  :label="t('mode.view')"
  :options="viewModeOptions"
>
  <template #option="{ option }">
    <div class="flex items-center justify-between w-full">
      <span>{{ option.label }}</span>
      <span v-if="option.presetCount" class="badge badge-sm">
        {{ option.presetCount }}
      </span>
    </div>
  </template>
</DropdownControl>
```

### Phase 5: Backward Compatibility üîÑ

**No Migration Needed:**

Since composite-custom presets remain unchanged, there's **no backward compatibility concern**.

**Key Points:**
- Existing composite-custom presets work exactly as before
- No breaking changes to preset format or loading
- New view mode presets are additive (separate directory)
- External apps consuming composite-custom presets are unaffected

**Optional Enhancement:**
If we want to provide default view presets for existing atlases:

```bash
pnpm run generate:default-view-presets
```

This script would:
- Read existing atlas configurations
- Generate sensible default view presets
- Create `configs/view-presets/{atlas}-{viewMode}-default.json` files
- Not touch existing composite-custom presets

## Benefits of This Architecture

### 1. **Separation of Concerns** ‚úÖ
- Composite-custom presets remain independent
- External apps can consume composite-custom without dependencies
- View mode presets are clearly separated
- No coupling between systems

### 2. **Backward Compatibility** ‚úÖ
- Zero changes to existing composite-custom preset format
- Existing integrations continue working
- No migration needed

### 3. **Persistence for All View Modes** ‚úÖ
- Unified/split/composite-existing configurations now saveable
- No need to reconfigure on reload
- URL state can reference preset ID

### 4. **Discoverability** ‚úÖ
- Preset selector shows available options per view mode
- Quick switching between projection configurations
- Recommended defaults per atlas per view mode

### 5. **Simplified Composite-Existing Mode** ‚úÖ
- Uses d3-composite-projections as-is (no parameter overrides beyond scale)
- Presets just select which d3 projection + optional global scale
- Respects the design of d3-composite-projections library

### 6. **Extensibility** ‚úÖ
- Easy to add new view mode presets
- Easy to add new projection parameters (unified/split)
- Schema-validated configurations
- Independent evolution of both systems

## Migration Path

### Step 1: Schema Extension (Week 1)
- [ ] Update TypeScript types
- [ ] Update JSON schema
- [ ] Add validation logic
- [ ] Write migration utilities

### Step 2: Preset Loading (Week 1-2)
- [ ] Extend PresetLoaderService
- [ ] Add view-mode-specific extraction
- [ ] Implement preset validation
- [ ] Add backward compatibility

### Step 3: Store Integration (Week 2)
- [ ] Update ConfigStore
- [ ] Update ParameterStore
- [ ] Add preset application logic
- [ ] Handle view mode transitions

### Step 4: UI Updates (Week 2-3)
- [ ] Update PresetSelector
- [ ] Add preset filtering by view mode
- [ ] Show preset availability indicators
- [ ] Add save/export functionality

### Step 5: Preset Creation (Week 3)
- [ ] Migrate existing presets
- [ ] Create complete multi-mode presets
- [ ] Create view-specific presets
- [ ] Document preset creation

### Step 6: Testing & Documentation (Week 4)
- [ ] Integration tests
- [ ] User documentation
- [ ] Developer documentation
- [ ] Migration guide

## Example User Workflows

### Workflow 1: Using Complete Preset
```
1. User selects "France" atlas
2. Preset selector shows "France - Configuration compl√®te"
3. User switches between view modes freely
4. Each mode uses optimal configuration from preset
5. All projections and parameters pre-configured
```

### Workflow 2: View-Specific Preset
```
1. User wants specialized unified view
2. Loads "France - Vue europ√©enne" preset
3. View mode automatically switches to "unified"
4. Azimuthal projection centered on Europe loads
5. Parameters optimized for European context
```

### Workflow 3: Creating Custom Preset
```
1. User configures projections in UI
2. Clicks "Save as Preset"
3. Names preset "My Custom France"
4. Selects which view modes to include
5. System generates JSON file
6. User can export/share preset
```

## Recommended Implementation Order

### Phase 1: Schema & Types (Week 1)
1. Create `types/view-preset.ts`
2. Create `configs/view-presets/schema.json`
3. Add preset registry mechanism
4. Do NOT touch composite-custom system

### Phase 2: Unified Mode Presets (Week 1-2)
1. Implement `ViewPresetLoaderService` for unified mode only
2. Create sample unified presets for each atlas
3. Add UI selector for unified presets
4. Test and validate

### Phase 3: Split Mode Presets (Week 2-3)
### Phase 3: Split Mode Presets (Week 2)
1. Extend service to support split mode presets
2. Create sample split presets with individual projections per territory
3. Update UI to show split presets
4. Test and validate

### Phase 4: Composite-Existing Presets (Week 3)
1. Add composite-existing support to service
2. Create simple presets (projection ID + optional scale)
3. Update UI for composite-existing mode
4. Test with all d3-composite-projections

### Phase 5: Documentation & Polish (Week 4)
1. Document how to create view presets
2. Create preset creation utilities
3. Generate default presets for all atlases
4. User documentation

## Key Design Principles

### 1. **Composite-Custom Independence** üîí
- **NO CHANGES** to existing composite-custom preset format
- Consumable by external apps without knowledge of view presets
- Remains the primary, most important feature
- Complete separation from view mode preset system

### 2. **View Mode Presets as Additive Feature** ‚ûï
- New feature that doesn't break existing functionality
- Separate directory (`view-presets/` vs `presets/`)
- Separate TypeScript types
- Separate loading service
- Separate UI components

### 3. **Composite-Existing Simplicity** üéØ
- Uses d3-composite-projections library as-is
- Only configurable parameter: optional `globalScale`
- Respects library design (hardcoded projections)
- Presets just for quick selection + scale adjustment

### 4. **Clear Separation of Concerns** üì¶
```
Composite-Custom System:
‚îú‚îÄ‚îÄ configs/presets/*.json
‚îú‚îÄ‚îÄ types/preset.ts
‚îú‚îÄ‚îÄ services/presets/preset-loader-service.ts
‚îî‚îÄ‚îÄ Used by: composite-custom mode + external apps

View Mode Preset System:
‚îú‚îÄ‚îÄ configs/view-presets/*.json
‚îú‚îÄ‚îÄ types/view-preset.ts
‚îú‚îÄ‚îÄ services/presets/view-preset-loader-service.ts
‚îî‚îÄ‚îÄ Used by: unified, split, composite-existing modes only
```

### 5. **No Cross-Contamination** üö´
- View presets CANNOT define composite-custom configs
- Composite-custom presets CANNOT define view mode configs
- Each system validates against its own schema
- No shared state between systems
