# Projection System Quick Reference

## Core Features

- **Type Safety**: Full TypeScript support
- **Metadata-Rich**: Capabilities, suitability scores, recommendations
- **Smart Recommendations**: Context-aware scoring (atlas, view mode, geography)
- **20+ Projections**: D3 builtin, extended, and composite projections
- **Extensible**: Simple definition files for new projections

## Architecture

```
src/core/projections/
├── types.ts           # TypeScript types
├── registry.ts        # Singleton projection registry with recommendation engine
├── factory.ts         # Projection factory
├── parameters.ts      # Parameter configuration and defaults
└── definitions/       # Projection definitions by category
    ├── composite.ts   # France, Portugal, EU composites
    ├── conic.ts       # Conic projections
    ├── azimuthal.ts   # Azimuthal projections
    ├── cylindrical.ts # Cylindrical projections
    ├── compromise.ts  # Compromise projections
    ├── world.ts       # World projections
    └── artistic.ts    # Artistic/historical projections
```

## Projection Definition Structure

```typescript
{
  // Identification
  id: string                    // 'mercator', 'conic-conformal'
  name: string                  // 'Mercator', 'Lambert Conformal Conic'
  aliases?: string[]            // Alternative names

  // Classification
  category: 'RECOMMENDED' | 'STANDARD' | 'SPECIALIZED' | 'ARTISTIC'
  family: 'conic' | 'azimuthal' | 'cylindrical' | 'world' | 'composite'
  strategy: 'D3_BUILTIN' | 'D3_EXTENDED' | 'D3_COMPOSITE'

  // Technical
  d3Name: string                // D3 function name
  defaultParameters?: object    // Default projection parameters

  // Context awareness
  capabilities: {
    preservesArea?: boolean
    preservesAngles?: boolean
    preservesDistance?: boolean
    preservesDirection?: boolean
    supportsSplit?: boolean
    supportsGraticule?: boolean
    supportsClipping?: boolean
  }

  suitability: {
    polar?: number              // 0-100 for Arctic/Antarctic
    midLatitude?: number        // 0-100 for temperate zones (30-60°)
    equatorial?: number         // 0-100 for tropical zones (±30°)
    global?: number             // 0-100 for world maps
    regional?: number           // 0-100 for country/region maps
    france?: number             // Atlas-specific scores
    portugal?: number
    eu?: number
  }

  recommendedForAtlases?: string[]  // ['france', 'portugal']

  // Documentation
  description: string
  useCases?: string[]
}
```

## Projection Categories

| Category | Description | Examples |
|----------|-------------|----------|
| `RECOMMENDED` | Best for common use cases | Mercator, Conic Conformal, Albers |
| `STANDARD` | General-purpose projections | Equirectangular, Stereographic |
| `SPECIALIZED` | Specific purposes | Gnomonic (navigation), Orthographic (globe view) |
| `ARTISTIC` | Creative/historical | Waterman Butterfly, Baker Dinomic |

## Projection Families

- `conic` - Best for mid-latitudes (30-60°): Conic Conformal, Albers, Conic Equal Area
- `azimuthal` - Best for polar regions (60°+): Stereographic, Azimuthal Equal Area, Orthographic
- `cylindrical` - Best for equatorial (±30°): Mercator, Equirectangular
- `world` - Best for global maps: Natural Earth, Robinson, Mollweide
- `composite` - Multi-projection layouts: France, Portugal, Spain, USA, EU, Netherlands, Japan, Ecuador, Chile, Malaysia, Equatorial Guinea, United Kingdom, Denmark

## Recommendation System

The recommendation engine evaluates projections based on geographic context matching.

### Context Matching
Suitability levels (excellent, good, usable, avoid) contain `GeographicContext` objects with criteria:
- `territoryType`: mainland, overseas, island, archipelago, peninsula
- `region`: europe, africa, asia, oceania, americas, polar, world
- `scale`: local, regional, continental, global
- `latitudeRange`: { min, max } for latitude-based matching

The registry matches these criteria against territory properties to determine suitability.

### Recommendation Levels
- **excellent** (ri-star-fill): Atlas recommended list OR matches excellent suitability
- **good** (ri-star-line): Matches good suitability criteria
- **usable** (ri-star-half-line): Matches usable suitability OR default level
- **not-recommended**: Atlas prohibited list OR matches avoid criteria

### Filter Context

```typescript
interface ProjectionFilterContext {
  atlasId?: string              // 'france' | 'portugal' | 'spain' | 'eu'
  viewMode?: ViewMode           // 'composite' | 'split' | 'individual'
  territory?: {                 // Territory being configured
    id: string
    type: 'mainland' | 'overseas' | 'island' | 'archipelago' | 'peninsula'
    region?: string
  }
  category?: ProjectionCategory
  family?: ProjectionFamily
  capabilities?: {
    preservesArea?: boolean
    preservesAngles?: boolean
  }
  limit?: number                // Max results
}
```

## Quick Selection Guide

### By Latitude

- **60°+ (Polar)**: `azimuthal-equal-area`, `stereographic`
- **30°-60° (Mid-latitude)**: `conic-conformal`, `albers`, `conic-equal-area`
- **±30° (Equatorial)**: `mercator`, `equirectangular`
- **Global**: `natural-earth`, `robinson`, `mollweide`

### By Use Case

- **Country/Regional Maps**: `conic-conformal`, `albers`
- **Navigation**: `mercator`, `gnomonic`
- **Area Comparison**: `albers`, `azimuthal-equal-area`, `mollweide`
- **Globe View**: `orthographic`, `perspective`
- **Creative/Artistic**: `waterman-butterfly`, `baker-dinomic`

### By Atlas

- **France**: `conic-conformal-france` (composite), `conic-conformal`, `albers`
- **Portugal**: `conic-conformal-portugal` (composite), `conic-conformal`, `mercator`
- **Spain**: `conic-conformal-spain` (composite), `conic-conformal`, `albers`
- **USA**: `albers-usa` (composite), `albers-usa-territories` (composite), `albers`, `conic-conformal`
- **EU**: `conic-conformal-europe` (composite), `conic-conformal`, `albers`
- **Netherlands**: `conic-conformal-netherlands` (composite), `conic-conformal`, `mercator`
- **Japan**: `conic-equidistant-japan` (composite), `conic-conformal`, `conic-equal-area`
- **Ecuador**: `mercator-ecuador` (composite), `mercator`, `equirectangular`
- **Chile**: `transverse-mercator-chile` (composite), `transverse-mercator`, `mercator`
- **Malaysia**: `mercator-malaysia` (composite), `mercator`, `equirectangular`
- **Equatorial Guinea**: `mercator-equatorial-guinea` (composite), `mercator`, `equirectangular`
- **United Kingdom**: `albers-uk` (composite), `albers`, `conic-conformal`
- **Denmark**: `transverse-mercator-denmark` (composite), `transverse-mercator`, `conic-conformal`

## Capabilities Reference

| Capability | Preserves | Best For |
|------------|-----------|----------|
| `preservesArea` | Area/size | Statistical maps, choropleth |
| `preservesAngles` | Angles/shapes | Navigation, city maps |
| `preservesDistance` | Distance from center | Distance measurement |
| `preservesDirection` | Direction from center | Navigation, polar maps |

## Projection Parameters

### Common Parameters

```typescript
{
  center?: [longitude, latitude]     // Projection center
  rotate?: [lambda, phi, gamma]      // Rotation angles
  parallels?: [south, north]         // Standard parallels (conic)
  scale?: number                     // Zoom level
  translate?: [x, y]                 // Pan position
  clipAngle?: number                 // Clipping angle (degrees)
}
```

### Interactive Panning

MapRenderer.vue supports interactive mouse panning for projections with rotation support:
- **Supported families**: Azimuthal, Cylindrical, Pseudocylindrical, Polyhedral
- **Interaction**: Click and drag on the map to rotate the projection in both axes
- **Visual feedback**: Cursor changes to grab/grabbing during interaction
- **Scaling**: 0.5 degrees per pixel for smooth control
- **Range**: 
  - Longitude: Wraps between -180° and 180°
  - Latitude: Clamped between -90° and 90° (prevents pole flipping)
- **Updates**: Changes flow through configStore.setCustomRotate and trigger re-render via effectiveProjectionParams watcher
- **Latitude Lock**: Latitude rotation locked by default, unlockable via toggle in ProjectionParamsControls
  - When locked: Mouse panning only affects longitude rotation
  - When unlocked: Mouse panning affects both longitude and latitude rotation
  - Lock state stored in configStore.rotateLatitudeLocked

### Parameter Relevance by Family

Defined in `parameters.ts` - determines which parameters are applicable:

| Family | rotateLon | rotateLat | centerLon | centerLat | parallels |
|--------|-----------|-----------|-----------|-----------|-----------|
| `cylindrical` | ✓ | ✓* | - | - | - |
| `pseudocylindrical` | ✓ | ✓* | - | - | - |
| `conic` | ✓ | - | ✓ | ✓ | ✓ |
| `azimuthal` | ✓ | ✓* | - | - | - |
| `polyhedral` | ✓ | ✓* | - | - | - |
| `composite` | - | - | - | - | - |

*✓ = Available but controlled by latitude lock (rotateLatitudeLocked in configStore)*

**Rules**:
- Conic: Uses `centerLongitude` + `centerLatitude` + `parallels` (rotation merged into center in UI)
- Azimuthal: Uses `rotate` for both axes (longitude/latitude) - rotation is preferred over center
- Cylindrical/Pseudocylindrical: Uses `rotate` for both axes (longitude/latitude)
- Polyhedral: Uses `rotate` for both axes (longitude/latitude) to change viewpoint
- Composite: Parameters managed per sub-projection

**Parameter Application Details**:
- Azimuthal: Rotation values negated (`[-lon, -lat]`) for intuitive slider behavior (D3 rotates globe, not view)
- Conic AUTO mode: Uses `rotate([-centerLon, -centerLat])` because domain fitting overrides `center()`
- Conic MANUAL mode: Uses `center([centerLon, centerLat])` directly (no domain fitting)
- Cylindrical/Pseudocylindrical: Uses `rotate([lon, lat])` without negation
- Scale: Only applied in MANUAL mode (AUTO mode calculates automatically)

## Projection Fitting Modes

Two fitting modes control how projections display data:

**AUTO Mode** (default):
- Uses Observable Plot's domain fitting (`domain: data`)
- Map automatically fits to data extent using `projection.fitExtent()`
- Parameters control positioning within the fitted view
- Scale calculated automatically
- Best for exploring territories and comparing regions

**MANUAL Mode**:
- Domain fitting disabled (`domain: undefined`)
- Parameters control absolute positioning
- Scale slider appears for zoom control (range: 100-5000, step: 50, default: 1000)
- Full manual control over view
- Best for creating specific views, presentations, screenshots

**Mode Toggle**: ProjectionParamsControls.vue provides "Manual Control" toggle using ToggleControl component

**Technical Note**: For conic projections with AUTO mode, `rotate()` must be used instead of `center()` because `fitExtent()` recalculates center, scale, and translate. In MANUAL mode, `center()` works directly since no automatic fitting occurs.

## Adding New Projection

1. Add definition to appropriate file in `definitions/`:

```typescript
export const myProjection: ProjectionDefinition = {
  id: 'my-projection',
  name: 'My Projection',
  category: 'STANDARD',
  family: 'conic',
  strategy: 'D3_BUILTIN',
  d3Name: 'geoConicConformal',
  
  capabilities: {
    preservesAngles: true,
    supportsSplit: true
  },
  
  suitability: {
    midLatitude: 85,
    regional: 90
  },
  
  description: 'Description of projection'
}
```

2. Export from `definitions/index.ts`
3. Registry auto-discovers on load
4. Run tests: `pnpm test src/projections/__tests__/`

## Related Docs

- `add-new-atlas.llm.txt` - Guide for configuring projections in atlas configs
- `atlases.llm.txt` - Atlas system architecture
- `scripts.llm.txt` - CLI tools reference
