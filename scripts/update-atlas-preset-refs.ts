#!/usr/bin/env tsx

/**
 * Update Atlas Configurations Script
 *
 * Adds defaultPreset and availablePresets fields to atlas configurations
 * based on the preset files that were generated by the migration script.
 */

import { readdirSync, readFileSync, writeFileSync } from 'node:fs'
import { join } from 'node:path'
import process from 'node:process'

interface AtlasConfig {
  [key: string]: any
  id: string
  defaultPreset?: string
  availablePresets?: string[]
}

async function main() {
  console.log('🔧 Updating atlas configurations with preset references')

  const configsDir = join(process.cwd(), 'configs')
  const presetsDir = join(process.cwd(), 'configs', 'presets')

  // Get all atlas config files
  const allFiles = readdirSync(configsDir)
  const configFiles = allFiles.filter(file =>
    file.endsWith('.json') && file !== 'schema.json',
  )

  // Get all preset files
  const presetFiles = readdirSync(presetsDir).filter(file =>
    file.endsWith('.json') && file !== 'schema.json' && file !== 'README.md',
  )

  let updatedCount = 0
  let skippedCount = 0

  for (const configFile of configFiles) {
    const atlasId = configFile.replace('.json', '')
    const configPath = join(configsDir, configFile)

    console.log(`\n📁 Processing: ${atlasId}`)

    try {
      const configContent = readFileSync(configPath, 'utf-8')
      const atlasConfig: AtlasConfig = JSON.parse(configContent)

      // Find presets for this atlas
      const atlasPresets = presetFiles
        .filter(presetFile => presetFile.startsWith(`${atlasId}-`))
        .map(presetFile => presetFile.replace('.json', ''))

      if (atlasPresets.length === 0) {
        console.log(`   ⚠️  No presets found for ${atlasId}`)
        skippedCount++
        continue
      }

      // Check if already has preset configuration
      const hasDefaultPreset = atlasConfig.defaultPreset !== undefined
      const hasAvailablePresets = atlasConfig.availablePresets !== undefined

      if (hasDefaultPreset && hasAvailablePresets) {
        console.log(`   ✅ Already configured: defaultPreset="${atlasConfig.defaultPreset}", availablePresets=[${atlasConfig.availablePresets?.join(', ') || ''}]`)
        skippedCount++
        continue
      }

      // Update configuration
      let updated = false

      if (!hasDefaultPreset) {
        // Use the first preset as default, prefer '-default' if available
        const defaultPreset = atlasPresets.find(p => p.endsWith('-default')) || atlasPresets[0]
        atlasConfig.defaultPreset = defaultPreset
        console.log(`   📝 Added defaultPreset: "${defaultPreset}"`)
        updated = true
      }

      if (!hasAvailablePresets) {
        atlasConfig.availablePresets = atlasPresets
        console.log(`   📝 Added availablePresets: [${atlasPresets.join(', ')}]`)
        updated = true
      }

      if (updated) {
        // Write updated configuration
        const jsonContent = JSON.stringify(atlasConfig, null, 2)
        writeFileSync(configPath, `${jsonContent}\n`)
        console.log(`   ✅ Updated: ${configFile}`)
        updatedCount++
      }
    }
    catch (error) {
      console.error(`   ❌ Error processing ${atlasId}:`, error)
      skippedCount++
    }
  }

  console.log('\n📈 Update Summary:')
  console.log(`   ✅ Updated: ${updatedCount} configs`)
  console.log(`   ⚠️  Skipped: ${skippedCount} configs`)
  console.log(`   📄 Total presets: ${presetFiles.length}`)

  console.log('\n🎉 Atlas configuration update completed!')
}

// Run the update
main().catch(console.error)
