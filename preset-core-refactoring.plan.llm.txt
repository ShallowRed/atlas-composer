# Preset System Core Refactoring - Implementation Plan

## Objective
Refactor the preset system to align with the established architecture pattern by separating core domain logic from service layer implementation. This creates consistency with the atlas, projection, and parameter systems that already follow this pattern.

## Context
- Architecture: docs/architecture.llm.txt
- Domain docs: docs/presets.llm.txt
- Current implementation: All preset logic is in src/services/presets/
- Target pattern: Core domain logic in src/core/presets/, service layer in src/services/presets/

## Current State Analysis

### Existing Structure
```
src/services/presets/
├── preset-loader.ts              # 349 lines - File loading + validation + conversion
├── view-preset-loader.ts         # 344 lines - View preset loading + validation
├── atlas-metadata-service.ts     # Atlas metadata extraction
└── __tests__/
    └── preset-loader.spec.ts     # Tests for preset loading
```

### What Should Move to Core
Based on atlas and projection patterns:

**Domain Types** (should be in core/presets/types.ts):
- PresetLoadResult
- ExtendedPresetConfig
- AtlasProjectionMetadata
- View preset types (ViewModePreset, ViewPresetLoadResult, etc.)

**Validation Logic** (should be in core/presets/validator.ts):
- Preset structure validation
- Parameter validation against registry
- Required parameter checks
- View preset validation

**Conversion Logic** (should be in core/presets/converter.ts):
- convertToDefaults() - Preset to territory defaults
- extractTerritoryParameters() - Extract projection parameters
- Format transformations

**Service Layer** (stays in services/presets/):
- File loading (async fetch operations)
- Registry management
- Coordination with other services

## Affected Domains
- [x] Preset system (docs/presets.llm.txt) - Add core layer documentation
- [x] Architecture (docs/architecture.llm.txt) - Update preset system entry
- [ ] Services (docs/services.llm.txt) - Update preset service documentation

## Changes

### Phase 1: Create Core Structure

- [ ] File: src/core/presets/types.ts
  - Action: Create domain types file
  - Move: PresetLoadResult, ExtendedPresetConfig, AtlasProjectionMetadata from preset-loader.ts
  - Move: All view preset types from types/view-preset.ts
  - Why: Domain types belong in core layer, consistent with projections/types.ts pattern

- [ ] File: src/core/presets/validator.ts
  - Action: Create validation logic module
  - Move: validatePreset() static method logic from PresetLoader
  - Move: Parameter validation logic (parameterRegistry checks) from loadPreset()
  - Move: View preset validation logic from ViewPresetLoader
  - Export: validatePresetStructure(), validatePresetParameters(), validateViewPreset()
  - Why: Validation is domain logic, should be testable independently of file I/O

- [ ] File: src/core/presets/converter.ts
  - Action: Create conversion logic module
  - Move: convertToDefaults() from PresetLoader
  - Move: extractTerritoryParameters() from PresetLoader
  - Export: Pure functions for format transformations
  - Why: Conversion logic is domain logic, no side effects, easily testable

- [ ] File: src/core/presets/index.ts
  - Action: Create barrel export
  - Export: All types, validators, converters
  - Why: Clean import path for consumers

### Phase 2: Refactor Service Layer

- [ ] File: src/services/presets/preset-loader.ts
  - Action: Simplify to file loading service
  - Import: Types, validators, converters from '@/core/presets'
  - Keep: loadPreset() - file loading + orchestration
  - Keep: loadPresetMetadata() - lightweight metadata loading
  - Keep: listAvailablePresets() - registry scanning
  - Remove: Type definitions (moved to core)
  - Remove: Validation logic (moved to core/presets/validator.ts)
  - Remove: Conversion logic (moved to core/presets/converter.ts)
  - Refactor: Use core validators and converters
  - Why: Service layer focuses on I/O and orchestration

- [ ] File: src/services/presets/view-preset-loader.ts
  - Action: Simplify to view preset file loading service
  - Import: Types and validators from '@/core/presets'
  - Keep: loadPreset() - file loading + orchestration
  - Keep: loadRegistry() - registry caching
  - Keep: listPresetsForAtlas() - filtering logic
  - Remove: Type definitions (moved to core)
  - Remove: Validation logic (moved to core/presets/validator.ts)
  - Refactor: Use core validators
  - Why: Service layer focuses on I/O and orchestration

- [ ] File: src/services/presets/atlas-metadata-service.ts
  - Action: Update imports
  - Import: Types from '@/core/presets'
  - Keep: All logic (this is legitimately service-level coordination)
  - Why: Metadata extraction involves coordination between atlas and preset services

### Phase 3: Update Type Definitions

- [ ] File: types/view-preset.ts
  - Action: Deprecate or remove (types moved to core)
  - Redirect: Re-export from '@/core/presets' if needed for backward compatibility
  - Why: Type consolidation in core layer

- [ ] File: types/index.ts
  - Action: Update exports if needed
  - Why: Maintain clean type exports

### Phase 4: Update Consumers

- [ ] File: src/services/atlas/atlas-coordinator.ts
  - Action: Update imports
  - Change: `import { PresetLoader } from '@/services/presets/preset-loader'`
  - To: `import { PresetLoader } from '@/services/presets'`
  - Import types from: '@/core/presets'
  - Why: Clean import paths

- [ ] File: src/stores/config.ts
  - Action: Update imports if using preset types
  - Import types from: '@/core/presets'
  - Why: Use core types for domain entities

- [ ] File: src/composables/*.ts
  - Action: Search for preset-related imports
  - Update: Import types from '@/core/presets'
  - Why: Use core types consistently

### Phase 5: Update Tests

- [ ] File: src/services/presets/__tests__/preset-loader.spec.ts
  - Action: Update imports
  - Import: Types from '@/core/presets'
  - Import: PresetLoader from '@/services/presets'
  - Why: Test against new structure

- [ ] File: src/core/presets/__tests__/validator.spec.ts
  - Action: Create new test file
  - Test: Validation logic independently
  - Coverage: Structure validation, parameter validation, view preset validation
  - Why: Core logic should have dedicated tests

- [ ] File: src/core/presets/__tests__/converter.spec.ts
  - Action: Create new test file
  - Test: Conversion logic independently
  - Coverage: convertToDefaults, extractTerritoryParameters
  - Why: Core logic should have dedicated tests

## Expected Structure After Refactoring

```
src/core/presets/
├── types.ts                    # Domain types (PresetLoadResult, etc.)
├── validator.ts                # Validation logic
├── converter.ts                # Conversion logic
├── index.ts                    # Barrel export
└── __tests__/
    ├── validator.spec.ts       # Validation tests
    └── converter.spec.ts       # Conversion tests

src/services/presets/
├── preset-loader.ts            # File loading service (simplified)
├── view-preset-loader.ts       # View preset file loading (simplified)
├── atlas-metadata-service.ts   # Metadata coordination (unchanged)
└── __tests__/
    └── preset-loader.spec.ts   # Service tests (updated)

types/
└── view-preset.ts              # Deprecated or re-exports from core
```

## Benefits

1. **Architectural Consistency**: Presets follow same pattern as atlases and projections
2. **Separation of Concerns**: Domain logic separate from I/O operations
3. **Testability**: Core logic can be tested without mocking file I/O
4. **Reusability**: Validators and converters can be used by multiple services
5. **Type Safety**: All domain types in one place
6. **Maintainability**: Clear boundaries between layers

## Documentation Updates

- [ ] docs/presets.llm.txt
  - Add: Core layer documentation section
  - Update: Service layer to reflect new responsibilities
  - Add: Architecture pattern explanation (core vs service)
  - Present tense: "Core layer provides validation logic"

- [ ] docs/architecture.llm.txt
  - Update: Preset System section (item 4 in Core Concepts)
  - Add: Core folder reference
  - Update: Domain boundaries to include preset domain
  - Present tense: "Preset domain has core types and validation"

- [ ] docs/services.llm.txt
  - Update: Preset services section
  - Clarify: Service responsibilities (file loading, orchestration)
  - Reference: Core layer for domain logic
  - Present tense: "PresetLoader service loads files"

## Verification

- [ ] Code compiles without errors
- [ ] All existing tests pass
- [ ] New core tests have good coverage
- [ ] No circular dependencies introduced
- [ ] Import paths are clean and consistent
- [ ] Documentation updated in present tense
- [ ] No temporal language in .llm.txt files

## Status
Status: PLANNED
Created: 2025-10-19
