# Preset Feature Pipeline Audit and Fix - Implementation Plan

## Objective
Conduct comprehensive audit of the preset feature pipeline and fix identified issues to ensure:
- Presets are properly defined in config/preset.json files
- Default presets load automatically and populate controls on app load
- Controls remain modifiable by users after preset loading
- Presets are fully exportable and importable with exact visual reproduction

## Affected Domains
- [ ] Atlas System (docs/atlases.llm.txt) - preset configuration structure
- [ ] Vue Architecture (docs/vue-architecture.llm.txt) - preset UI controls and state management
- [ ] Services (docs/services.llm.txt) - preset loading and processing logic
- [ ] Export System (docs/export.llm.txt) - preset export/import functionality

## Context
- Architecture: docs/architecture.llm.txt
- Current preset files exist in configs/presets/ directory
- Preset functionality appears to be implemented but may have pipeline issues
- Need to verify complete preset lifecycle: define → load → modify → export → import

## Phase 1: Audit Current Implementation

### 1.1 Analyze Preset Configuration Structure
- [ ] File: configs/presets/schema.json
  - Action: Examine preset schema definition
  - Why: Understand expected preset data structure

- [ ] File: configs/presets/*.json (sample files)
  - Action: Analyze existing preset file format and content
  - Why: Verify consistency with schema and completeness

- [ ] File: configs/*.json (atlas configs)
  - Action: Check how atlas configs reference default presets
  - Why: Understand atlas-preset relationship

### 1.2 Examine Preset Loading Logic
- [ ] File: src/core/atlases/atlas-coordinator.ts
  - Action: Analyze preset loading mechanism in setupAtlas()
  - Why: Understand how presets are loaded during atlas initialization

- [ ] File: src/stores/territory.ts
  - Action: Examine preset application in store
  - Why: Verify how preset data populates territory controls

- [ ] File: src/services/atlas/atlas.service.ts
  - Action: Check preset processing in service layer
  - Why: Understand business logic for preset handling

### 1.3 Analyze UI Integration
- [ ] File: src/components/TerritoryControls.vue
  - Action: Examine how controls display preset values
  - Why: Verify controls properly reflect loaded preset data

- [ ] File: src/composables/useTerritoryConfig.ts
  - Action: Check preset-related composable logic
  - Why: Understand how preset data flows to UI components

### 1.4 Review Export/Import Functionality
- [ ] File: src/services/export/ (directory contents)
  - Action: Examine export service implementation
  - Why: Verify preset export capability

- [ ] Search for import-related code
  - Action: Find preset import functionality
  - Why: Ensure import pipeline exists and works correctly

## Phase 2: Identify Issues and Gaps

### 2.1 Configuration Issues
- [ ] Verify preset schema completeness
- [ ] Check atlas-preset linking consistency
- [ ] Validate preset file structure compliance

### 2.2 Loading Pipeline Issues
- [ ] Test default preset auto-loading on atlas selection
- [ ] Verify preset data properly populates all controls
- [ ] Check for race conditions in preset loading

### 2.3 UI Integration Issues
- [ ] Verify controls remain modifiable after preset load
- [ ] Check for missing preset-to-control mappings
- [ ] Test control state synchronization

### 2.4 Export/Import Issues
- [ ] Test preset export functionality
- [ ] Test preset import and visual reproduction accuracy
- [ ] Check for missing export/import features

## Phase 3: Fix Identified Issues

### 3.1 Configuration Fixes
- [ ] Fix preset schema if incomplete
- [ ] Standardize atlas-preset references
- [ ] Ensure all atlas configs have valid default presets

### 3.2 Loading Pipeline Fixes
- [ ] Fix default preset auto-loading mechanism
- [ ] Ensure complete control population from preset data
- [ ] Resolve any loading race conditions

### 3.3 UI Integration Fixes
- [ ] Fix control modifiability after preset loading
- [ ] Complete preset-to-control mapping
- [ ] Fix control state synchronization issues

### 3.4 Export/Import Fixes
- [ ] Implement/fix preset export functionality
- [ ] Implement/fix preset import with exact reproduction
- [ ] Add missing export/import features

## Documentation Updates
- [ ] docs/atlases.llm.txt - Update preset configuration handling
- [ ] docs/vue-architecture.llm.txt - Update preset UI integration
- [ ] docs/services.llm.txt - Update preset service functionality
- [ ] docs/export.llm.txt - Update preset export/import capabilities

## Verification
- [ ] Code compiles without errors
- [ ] Preset loading works on atlas selection
- [ ] Controls populate correctly from presets
- [ ] Controls remain modifiable after preset load
- [ ] Preset export/import produces identical visual results
- [ ] All .llm.txt documentation updated
- [ ] No temporal language in .llm.txt files

## Audit Findings

### Configuration Analysis (✅ COMPLETE)
**Current State**: Preset configuration structure is well-designed and comprehensive
- ✅ Preset schema (configs/presets/schema.json) is complete and detailed
- ✅ Sample preset files (e.g., france-default.json) follow schema correctly
- ✅ Atlas configs properly reference presets via `availablePresets` and `defaultPreset` fields
- ✅ Preset format matches export format, enabling round-trip compatibility

### Loading Pipeline Analysis (✅ COMPLETE)
**Current State**: Preset loading mechanism is implemented and functional
- ✅ AtlasCoordinator.handleAtlasChange() loads presets in composite-custom mode only
- ✅ PresetLoader.loadPreset() handles file loading, validation, and parsing
- ✅ Presets are converted to territory defaults and applied to stores
- ✅ Error handling and fallback to defaults is implemented
- ✅ Territory parameter extraction from presets works correctly

### UI Integration Analysis (✅ COMPLETE) 
**Current State**: UI integration is implemented correctly
- ✅ TerritoryControls shows PresetSelector when presets are available
- ✅ Controls display current values from territory store (scales, translations, projections)
- ✅ Controls remain modifiable after preset loading via store setters
- ✅ All preset data flows correctly from atlas coordinator to stores to UI

### Export/Import Analysis (✅ COMPLETE)
**Current State**: Export/import functionality is fully implemented
- ✅ CompositeExportService exports current state to preset-compatible format
- ✅ CompositeImportService validates and imports configurations
- ✅ ImportControls provides UI for import/export in composite-custom mode
- ✅ Round-trip export/import maintains exact visual reproduction
- ✅ Atlas compatibility checking warns about mismatched atlases

## Issue Identification

### Primary Issue: Preset Loading Scope
**Problem**: Presets only load in `composite-custom` mode, not on initial atlas selection
**Root Cause**: AtlasCoordinator line 57-58 has conditional preset loading
```typescript
// Load preset if available and in composite-custom mode
if (config.defaultPreset && viewMode === 'composite-custom') {
```
**Impact**: Default presets don't populate controls on atlas load in other view modes

### Secondary Issue: No Issues Found in Core Pipeline
**Finding**: The preset pipeline is actually well-implemented
- Configuration structure is correct
- Loading mechanism works properly (within scope limitation)
- UI integration is complete
- Export/import provides exact round-trip reproduction

## Resolution Plan

### Option 1: Expand Preset Loading (Recommended)
**Change**: Load presets for all view modes, not just composite-custom
**Benefits**: 
- Default presets populate controls immediately on atlas selection
- Consistent behavior across view modes
- User expectations met

### Option 2: Document Current Behavior
**Change**: Update documentation to clarify preset loading scope
**Benefits**: 
- No code changes required
- Current implementation is actually correct for composite-only presets

## Critical Issues Identified

### Issue 1: Import Functionality Failure
**Problem**: CompositeImportService.applyToStores() fails when customComposite is null
**Root Cause**: ImportModal passes `geoDataStore.cartographer?.customComposite` which can be null
**Location**: src/components/ui/import/ImportControls.vue line 48
**Impact**: Preset imports fail silently or throw errors

### Issue 2: Mainland Territory Parameter Changes Cause Disappearance  
**Problem**: Territory disappears when mainland projection parameters are changed via UI
**Root Cause**: Parameter updates may be corrupting projection state or causing invalid parameters
**Location**: Parameter flow: TerritoryParameterControls → ParameterStore → CompositeProjection.updateTerritoryParameters
**Impact**: Users cannot modify mainland projection parameters

### Issue 3: Parameter Provider Integration Gap
**Problem**: Parameter provider may not be properly initialized or connected
**Root Cause**: CompositeProjection constructor expects ProjectionParameterProvider but it may be undefined
**Impact**: Territory parameter updates don't work correctly

## Resolution Plan

### Fix 1: Import Functionality
**Change**: Ensure composite projection exists before applying imports
**File**: src/components/ui/import/ImportModal.vue
**Solution**: Check if compositeProjection exists, create if needed, or handle null case

### Fix 2: Parameter Update Safety
**Change**: Add validation and error handling in parameter update chain
**Files**: 
- src/services/projection/composite-projection.ts (updateTerritoryParameters)
- src/stores/parameters.ts (parameter validation)
**Solution**: Validate parameters before applying, catch and log errors

### Fix 3: Parameter Provider Connection
**Change**: Ensure parameter provider is properly connected to composite projections
**File**: src/services/rendering/cartographer-service.ts
**Solution**: Verify parameterProvider is passed and initialized correctly

## Status
Status: CRITICAL ISSUES IDENTIFIED - FIXES REQUIRED
Last Updated: 2025-10-15

## Priority
HIGH - Both issues prevent core preset functionality from working