# Data Loading Simplification - Implementation Plan

## Objective
Simplify the three redundant data loading methods in geoDataStore into a cleaner, more maintainable API that better reflects actual application needs.

## Affected Domains
- [x] Services (docs/services.llm.txt) - GeoDataStore data loading methods
- [x] Vue Architecture (docs/vue-architecture.llm.txt) - Store interface changes, composable updates

## Context
- Architecture: docs/architecture.llm.txt
- Domain docs: docs/services.llm.txt, docs/vue-architecture.llm.txt

## Problem Analysis

### Current State (3 methods with redundancy):
1. `loadAllAtlasData(territoryMode)` - Loads both territory + unified data in parallel
   - Used by: InitializationService during app startup
   - Purpose: Preload all data types to make view switching instant

2. `loadTerritoryData()` - Loads only territory data (mainland + overseas)
   - Used by: useAtlasData composable conditionally
   - Problem: Should never be needed if loadAllAtlasData() works correctly

3. `loadRawUnifiedData(mode)` - Loads only unified data for a given territory mode
   - Used by: useAtlasData composable conditionally AND UnifiedView.vue watcher
   - Problem: Creates two different loading paths, bypasses loading state management

### Issues Identified:
1. **Redundancy**: loadTerritoryData() duplicates part of loadAllAtlasData()
2. **Inconsistent loading paths**: UnifiedView.vue directly calls loadRawUnifiedData() bypassing composable
3. **Missing reload capability**: When territory mode changes in unified view, need to reload only unified data
4. **Confusing API**: Three methods when only two operations are needed: "load all" and "reload unified"

## Proposed Solution

### New Simplified API:
1. `loadAllAtlasData(territoryMode)` - Keep as-is, loads everything in parallel
   - Used during: App initialization, atlas switching
   
2. `reloadUnifiedData(territoryMode)` - NEW, replaces loadRawUnifiedData for refreshes
   - Used when: Territory mode changes in unified view
   - Does NOT check if cartographer exists (assumes already initialized)
   - Provides proper loading state management

3. Remove: `loadTerritoryData()` - Redundant with loadAllAtlasData()
4. Remove: `loadRawUnifiedData()` - Replaced by reloadUnifiedData()

## Changes

### Phase 1: Update geoDataStore
- [x] File: src/stores/geoData.ts
  - Add new method: `reloadUnifiedData(territoryMode: string)`
  - Remove method: `loadTerritoryData()`
  - Remove method: `loadRawUnifiedData(mode: string)`
  - Update exports to reflect new API
  - Keep: `loadAllAtlasData()` unchanged

### Phase 2: Update UnifiedView Component
- [x] File: src/components/views/UnifiedView.vue
  - Change watcher from `loadRawUnifiedData(newMode)` to `reloadUnifiedData(newMode)`
  - Ensures consistent loading state management

### Phase 3: Update useAtlasData Composable
- [x] File: src/composables/useAtlasData.ts
  - Remove: `loadDataForViewMode()` method (no longer needed)
  - Update: `reloadUnifiedData()` to call `geoDataStore.reloadUnifiedData()`
  - Simplify: Since InitializationService preloads all data, conditional loading is obsolete

### Phase 4: Verify InitializationService
- [x] File: src/services/initialization/initialization-service.ts
  - Verify: Still uses `loadAllAtlasData()` correctly
  - No changes needed (method unchanged)

## Implementation Details

### reloadUnifiedData() Implementation:
```typescript
/**
 * Reload unified data for a specific territory mode
 * Used when territory mode changes in unified view
 * Assumes cartographer is already initialized
 */
const reloadUnifiedData = async (territoryMode: string) => {
  const configStore = useConfigStore()
  
  if (!cartographer.value) {
    throw new Error('Cannot reload unified data: Cartographer not initialized')
  }
  if (!configStore.currentAtlasConfig) {
    throw new Error('Cannot reload unified data: Atlas config not loaded')
  }

  try {
    isLoading.value = true
    error.value = null

    const service = cartographer.value.geoData
    const loader = TerritoryDataLoader.fromPattern(configStore.currentAtlasConfig.pattern)
    const result = await loader.loadUnifiedData(service, territoryMode, {
      atlasConfig: configStore.currentAtlasConfig,
      atlasService: configStore.atlasService,
      hasTerritorySelector: configStore.currentAtlasConfig.hasTerritorySelector ?? false,
      isWildcard: configStore.currentAtlasConfig.isWildcard ?? false,
    })

    rawUnifiedData.value = result.data
    debug('Reloaded unified data for mode: %s', territoryMode)
  }
  catch (err) {
    error.value = err instanceof Error ? err.message : 'Error reloading unified data'
    debug('Error reloading unified data: %O', err)
    throw err
  }
  finally {
    isLoading.value = false
  }
}
```

### useAtlasData Simplified:
```typescript
// Remove loadDataForViewMode() entirely
// Simplify reloadUnifiedData():
async function reloadUnifiedData() {
  if (configStore.viewMode === 'unified') {
    await withMinLoadingTime(async () => {
      await geoDataStore.reloadUnifiedData(configStore.territoryMode)
    })
  }
}
```

## Documentation Updates
- [x] docs/services.llm.txt - Update GeoDataStore section with new API
- [x] docs/vue-architecture.llm.txt - Update useAtlasData composable description

## Verification
- [x] Code compiles without errors
- [x] All references to removed methods updated
- [x] LoadAllAtlasData still works for initialization
- [x] Territory mode switching in unified view works correctly
- [x] No temporal language in .llm.txt files

## Status
Status: COMPLETE
Created: 2025-10-21
Completed: 2025-10-21
