# Composite Presets Implementation Plan

## Objective
Implement preset system to provide high-quality default composite projections that load automatically on app startup, while maintaining clean architectural separation between atlas configuration and projection composition.

## Affected Domains
- [ ] Atlas configuration (docs/atlases.llm.txt) - Add preset field documentation
- [ ] Service layer (docs/services.llm.txt) - Add PresetLoader service documentation
- [ ] Export system (docs/export.llm.txt) - Document preset creation workflow

## Context
- Architecture: docs/architecture.llm.txt
- Atlas docs: docs/atlases.llm.txt
- Services: docs/services.llm.txt
- Export system: docs/export.llm.txt
- Proposal: composite-presets-architecture-proposal.md

## Changes

### Phase 1: Remove Dead Code (Direct Edit - 4 files)
Context: The `defaultCompositeConfig` field in atlas JSON files is completely unused

- [ ] File: configs/schema.json
  - Action: Remove `defaultCompositeConfig` property definition (lines ~135-180)
  - Why: Dead code - never read by loader, creates confusion about data ownership

- [ ] File: configs/france.json
  - Action: Remove `defaultCompositeConfig` block (lines 20-67)
  - Why: Unused duplicate of territories[].rendering data

- [ ] File: configs/portugal.json
  - Action: Remove `defaultCompositeConfig` block
  - Why: Unused duplicate of territories[].rendering data

- [ ] File: configs/spain.json
  - Action: Remove `defaultCompositeConfig` block
  - Why: Unused duplicate of territories[].rendering data

### Phase 2: Create Preset Infrastructure (4 new files)

- [ ] File: configs/presets/schema.json
  - Action: Create JSON schema for preset files
  - Content: Copy ExportedCompositeConfig type definition from src/types/export-config.ts
  - Why: Validation and documentation for preset format

- [ ] File: configs/presets/README.md
  - Action: Create preset documentation
  - Content: How to create, name, validate, and contribute presets
  - Why: Guide maintainers and contributors

- [ ] File: src/services/presets/preset-loader.ts
  - Action: Create preset loading service
  - Content:
    ```typescript
    export class PresetLoader {
      static async loadPreset(presetId: string): Promise<ExportedCompositeConfig>
      static listAvailablePresets(atlasId: string): string[]
      static convertToDefaults(preset: ExportedCompositeConfig): TerritoryDefaults
    }
    ```
  - Why: Load presets from configs/presets/ directory, delegate to CompositeImportService

- [ ] File: src/services/presets/__tests__/preset-loader.spec.ts
  - Action: Create unit tests for PresetLoader
  - Content: Test loading, validation, conversion, error handling
  - Why: Ensure preset loading reliability

### Phase 3: Update Atlas Configuration (4 files)

- [ ] File: configs/schema.json
  - Action: Add preset-related fields to schema
  - Content:
    ```json
    "defaultPreset": {
      "type": "string",
      "description": "Preset file to load by default (e.g., 'france-default')"
    },
    "availablePresets": {
      "type": "array",
      "items": { "type": "string" },
      "description": "List of available preset files for UI selector"
    }
    ```
  - Why: Enable atlas configs to reference presets

- [ ] File: src/types/atlas.ts
  - Action: Add preset fields to AtlasConfig interface
  - Content: `defaultPreset?: string`, `availablePresets?: string[]`
  - Why: Type safety for preset references

- [ ] File: src/core/atlases/loader.ts
  - Action: Read preset fields from JSON config
  - Content: Parse defaultPreset and availablePresets, include in AtlasConfig
  - Why: Make preset references available to app

- [ ] File: types/atlas-config.ts
  - Action: Add preset fields to backend config type
  - Content: `defaultPreset?: string`, `availablePresets?: string[]`
  - Why: Type consistency across config system

### Phase 4: Integrate Preset Loading (2 files)

- [ ] File: src/services/atlas/atlas-coordinator.ts
  - Action: Load preset on atlas change if defaultPreset exists
  - Content:
    ```typescript
    static async handleAtlasChange(atlasId, viewMode) {
      const config = getAtlasConfig(atlasId)
      
      // Load preset if available and in composite-custom mode
      if (config.defaultPreset && viewMode === 'composite-custom') {
        const preset = await PresetLoader.loadPreset(config.defaultPreset)
        const defaults = PresetLoader.convertToDefaults(preset)
        return { ...state, ...defaults }
      }
      
      // Fallback: generate from territories[].rendering
      const defaults = TerritoryDefaultsService.initializeAll(territories)
      return { ...state, ...defaults }
    }
    ```
  - Why: Apply preset defaults on app load

- [ ] File: src/stores/config.ts
  - Action: Update atlas change watcher to handle async preset loading
  - Content: Make watcher async-aware, handle loading states
  - Why: Support async preset loading in reactive store

### Phase 5: Create Default Presets (Data Entry - 3 files)

Context: Create high-quality default presets by exporting manually-adjusted compositions

- [ ] File: configs/presets/france-default.json
  - Action: Create default France preset
  - Process:
    1. Load France in app
    2. Adjust territories to match d3-composite-projections positioning
    3. Export via existing export dialog
    4. Save to configs/presets/france-default.json
    5. Validate against schema
  - Why: Provide production-quality default for France

- [ ] File: configs/presets/portugal-default.json
  - Action: Create default Portugal preset
  - Process: Same as France
  - Why: Provide production-quality default for Portugal

- [ ] File: configs/presets/spain-default.json
  - Action: Create default Spain preset
  - Process: Same as France
  - Why: Provide production-quality default for Spain

### Phase 6: Wire Up Atlas Configs (3 files)

- [ ] File: configs/france.json
  - Action: Add preset references
  - Content:
    ```json
    "defaultPreset": "france-default",
    "availablePresets": ["france-default"]
    ```
  - Why: Enable automatic preset loading for France

- [ ] File: configs/portugal.json
  - Action: Add preset references
  - Content:
    ```json
    "defaultPreset": "portugal-default",
    "availablePresets": ["portugal-default"]
    ```
  - Why: Enable automatic preset loading for Portugal

- [ ] File: configs/spain.json
  - Action: Add preset references
  - Content:
    ```json
    "defaultPreset": "spain-default",
    "availablePresets": ["spain-default"]
    ```
  - Why: Enable automatic preset loading for Spain

### Phase 7: UI Integration (Optional - 2 files)

Context: Allow users to switch between presets via UI

- [ ] File: src/components/ui/PresetSelector.vue
  - Action: Create preset selector component
  - Content: Dropdown showing availablePresets, load button, current indicator
  - Why: Enable runtime preset switching

- [ ] File: src/components/ui/projections/ProjectionParamsControls.vue
  - Action: Add PresetSelector in composite-custom mode
  - Content: Conditional render when availablePresets.length > 1
  - Why: Display preset selector when multiple options available

## Documentation Updates
REMEMBER: .llm.txt files are STATIC REFERENCE docs
- Remove: "before/after", "resolved", "completed", dates, objectives, problems
- Keep: current state, how it works, what it does
- Use: present tense only ("handles", "provides", "uses")

- [ ] docs/atlases.llm.txt
  - Update: Add preset system documentation
  - Content (present tense):
    - "Atlas configs reference preset files via defaultPreset field"
    - "Presets use ExportedCompositeConfig format"
    - "Loader applies preset defaults on initialization"
  - Remove: Any temporal language about the change

- [ ] docs/services.llm.txt
  - Update: Add PresetLoader service documentation
  - Content (present tense):
    - "PresetLoader loads preset files from configs/presets/"
    - "Delegates validation to CompositeImportService"
    - "Converts presets to TerritoryDefaults format"
  - Remove: Any mentions of "new" or "added"

- [ ] docs/export.llm.txt
  - Update: Document preset creation workflow
  - Content (present tense):
    - "Presets are ExportedCompositeConfig files in configs/presets/"
    - "Created by exporting manually-adjusted compositions"
    - "Validated using existing export validation"
  - Remove: Any historical context

## Verification
- [ ] Code compiles without errors (pnpm build)
- [ ] Tests pass (pnpm test)
- [ ] Config validation passes (pnpm validate:configs)
- [ ] App loads with preset defaults
- [ ] Export/import still works
- [ ] All .llm.txt documentation updated
- [ ] No temporal language in .llm.txt files
- [ ] Plan file marked complete

## Status
Status: PLANNED
Started: 2025-10-13
Last Updated: 2025-10-13

## Notes
- Phase 1 can proceed immediately (removes unused code)
- Phases 2-6 are the core implementation (preset system)
- Phase 7 is optional enhancement (UI selector for multiple presets)
- All phases maintain backward compatibility
- Presets reuse 100% of export/import infrastructure
