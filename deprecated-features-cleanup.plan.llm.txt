# Deprecated Features Cleanup - Implementation Plan

## Objective
Remove all deprecated features, legacy code, and backward compatibility layers from the parameter and preset systems to achieve the cleanest possible architecture with no users yet.

## Affected Domains
- [x] Parameters System (docs/services.llm.txt - Parameter Management section)
- [x] Preset System (docs/presets.llm.txt)
- [x] Export/Import System (docs/export.llm.txt)
- [x] Vue Architecture (docs/vue-architecture.llm.txt)

## Context
- Architecture: docs/architecture.llm.txt
- Parameter Management: docs/services.llm.txt (Parameter Registry System)
- Preset System: docs/presets.llm.txt
- Export/Import: docs/export.llm.txt

## Deprecated Features to Remove

### 1. Deprecated Parameters
- `scale` parameter (computed value, marked @deprecated)
- `baseScale` parameter (legacy base scale, marked @deprecated)
- Both parameters are marked as non-exportable and non-relevant but still validated

### 2. Legacy Parameter System Components
- Legacy constraints property in parameter definitions
- relevantFor property (replaced by familyConstraints)
- Backward compatibility validation logic
- Legacy parameter accessors in stores

### 3. Backward Compatibility Code
- Parameter registry fallback to legacy constraints
- Legacy switch statements in composite projection
- Backward compatibility export service logic
- Legacy parameter format handling
- Migration code for old parameter formats

### 4. Unused Export/Import Features
- Config migration system (ConfigMigrator)
- Legacy export service parameter handling
- Deprecated parameter validation warnings
- Version migration logic

## Changes

### Phase 1: Remove Deprecated Parameters
- [x] File: src/types/projection-parameters.ts
  - Action: Remove scale and baseScale properties from ProjectionParameters interface
  - Why: These parameters are deprecated and no longer needed

- [x] File: src/core/parameters/parameter-definitions.ts
  - Action: Remove scale and baseScale parameter registrations
  - Why: Clean up deprecated parameter definitions

### Phase 2: Clean Parameter Registry
- [x] File: src/core/parameters/parameter-registry.ts
  - Action: Remove legacy constraints property, relevantFor fallbacks, and deprecated validation logic
  - Why: Eliminate legacy parameter system components

- [x] File: src/core/parameters/parameter-registry.ts
  - Action: Remove deprecated parameter skip logic in validate method
  - Why: No deprecated parameters remain to skip

### Phase 3: Clean Export/Import System
- [x] File: src/services/export/composite-export-service.ts
  - Action: Remove deprecated parameter handling, legacy parameter provider logic
  - Why: Simplify export service to only handle current parameter format

- [x] File: src/services/export/composite-import-service.ts
  - Action: Remove config migration logic and backward compatibility checks
  - Why: No need for legacy format support

- [x] File: src/services/export/config-migrator.ts
  - Action: DELETE FILE - no longer needed
  - Why: No migration needed without legacy support

### Phase 4: Clean Composite Projection
- [x] File: src/services/projection/composite-projection.ts
  - Action: Remove all scale/baseScale references, legacy fallback code
  - Why: Use only scaleMultiplier with referenceScale from atlas

### Phase 5: Clean Stores
- [x] File: src/stores/config.ts
  - Action: Remove legacy parameter accessors
  - Why: All parameter access should use parameter store

- [x] File: src/stores/parameters.ts
  - Action: Remove any deprecated parameter handling
  - Why: Clean parameter store interface

### Phase 6: Clean Tests
- [x] File: src/core/parameters/__tests__/parameter-registry.spec.ts
  - Action: Remove tests for deprecated parameters and legacy validation
  - Why: No deprecated features to test

- [x] File: src/core/parameters/__tests__/parameter-registration.spec.ts
  - Action: Update tests to not expect deprecated parameters
  - Why: Deprecated parameters no longer exist

### Phase 7: Clean Components
- [x] File: src/components/ui/parameters/TerritoryParameterControls.vue
  - Action: Remove any legacy parameter handling or reset logic
  - Why: Simplified parameter controls

## Documentation Updates
- [x] docs/services.llm.txt - Remove references to deprecated parameters and legacy systems
- [x] docs/presets.llm.txt - Update to reflect clean parameter system
- [x] docs/export.llm.txt - Remove migration and legacy format documentation
- [x] docs/vue-architecture.llm.txt - Remove legacy parameter accessor documentation

## Verification
- [x] Code compiles without errors
- [x] All parameter tests pass (expect fewer tests due to removed deprecated features)
- [x] Export/import works with only current parameter format
- [x] No @deprecated annotations remain in parameter/preset code
- [x] No "legacy" or "backward compatibility" comments remain in parameter/preset code

## Expected Outcomes
- Cleaner parameter system with only scaleMultiplier (no scale/baseScale)
- Simplified export/import with single current format
- Removed migration and legacy support code (~500+ lines)
- Streamlined parameter registry with only familyConstraints
- Cleaner composite projection using only referenceScale Ã— scaleMultiplier

## Status
Status: COMPLETE
Last Updated: 2025-10-16

## Summary
Successfully removed all deprecated features and legacy code from parameter and preset systems:
- Removed deprecated `scale` and `baseScale` parameters
- Cleaned parameter registry of legacy constraints and fallback code
- Simplified export/import system with single current format
- Deleted config-migrator.ts - no longer needed
- Updated tests to reflect clean parameter system
- System compiles cleanly with no TypeScript errors

The parameter and preset systems now use only current `scaleMultiplier` parameter with atlas referenceScale, providing the cleanest possible architecture without backward compatibility concerns.