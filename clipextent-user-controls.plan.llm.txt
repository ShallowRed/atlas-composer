# ClipExtent User Controls - Implementation Plan

## Objective
Add user controls for clipExtent in custom composite projections to fix drag behavior issues and provide UI controls for precise territory clipping adjustments.

## ClipExtent Pipeline Understanding

**Complete Flow:**
1. **Preset JSON** → `clipExtent: [[-0.14, -0.032], [-0.0996, 0]]` (normalized coordinates)
2. **PresetLoader.convertToDefaults()** → Converts to `{x1: -0.14, y1: -0.032, x2: -0.0996, y2: 0}`
3. **Territory Store** → Stores in `territoryClipExtents` (reactive)
4. **TerritoryStoreClipExtentProvider** → Provides dynamic access via `getClipExtent(territoryCode)`
5. **CompositeProjection.initialize()** → Gets clipExtent from provider, converts to `[[x1,y1],[x2,y2]]`
6. **CompositeProjection.build()** → Applies clipExtent: `[centerX + x1 * referenceScale, centerY + y1 * referenceScale]`

**The Core Problem:**
- ClipExtent calculated relative to `centerX/centerY` (map center)
- Territories positioned at `centerX + translateOffset[0], centerY + translateOffset[1]`
- When territory drags, `translateOffset` changes but clipExtent stays fixed to map center
- Result: Territory moves but its clipping region doesn't follow

**Coordinate System:**
- ClipExtent values are normalized coordinates (-1.0 to 1.0 range)
- Multiplied by `referenceScale` (2700) to get pixel coordinates
- NOT meant to scale with territory scale multiplier (that would break preset proportions)
- Should be positioned relative to territory center, not map center

## Affected Domains
- [ ] Vue Architecture (docs/vue-architecture.llm.txt) - New UI controls in TerritoryParameterControls
- [ ] Services (docs/services.llm.txt) - CompositeProjection clipExtent calculation fixes

## Changes

### Phase 1: Fix Drag Behavior (Core Issue)
- [ ] File: src/services/projection/composite-projection.ts
  - Action: Make clipExtent follow territory position during drag
  - Why: ClipExtent must move with territory to maintain proper clipping
  - Technical: Change from `centerX + x1 * referenceScale` to `territoryX + x1 * referenceScale`
  - Lines affected: ~760-770 in build() method
  - Note: Only add translateOffset, NOT scale multiplier (preserves preset proportions)

### Phase 2: Add Reset Support for ClipExtent
- [ ] File: src/composables/useTerritoryTransforms.ts
  - Action: Add clipExtent reset support in resetTerritoryToDefaults() and resetAllToDefaults()
  - Why: ClipExtent is currently missing from preset reset functionality
  - Lines affected: ~195-230 (resetTerritoryToDefaults), ~120-150 (resetAllToDefaults)
  - Technical: Add `territoryStore.setTerritoryClipExtent(territoryCode, originalDefaults.clipExtents?.[territoryCode] || null)`

### Phase 3: Add UI Controls
- [ ] File: src/components/ui/parameters/TerritoryParameterControls.vue
  - Action: Add 4 clipExtent sliders (x1, y1, x2, y2) in Advanced section
  - Why: Provide user interface for precise clipExtent adjustments
  - Range: -1.0 to 1.0 (normalized coordinates)
  - Integration: Use existing territory store `setTerritoryClipExtent()` method

## Technical Implementation

### Phase 1: Drag-Aware ClipExtent
**Current (Broken):**
```typescript
const clipExtentScreen: [[number, number], [number, number]] = [
  [centerX + x1 * referenceScale + epsilon, centerY + y1 * referenceScale + epsilon],
  [centerX + x2 * referenceScale - epsilon, centerY + y2 * referenceScale - epsilon],
]
```

**Fixed (Drag-Aware):**
```typescript
// Territory position includes both translateOffset (drag) and parameterTranslate (parameter controls)
const territoryX = centerX + subProj.translateOffset[0] + parameterTranslate[0]
const territoryY = centerY + subProj.translateOffset[1] + parameterTranslate[1]

const clipExtentScreen: [[number, number], [number, number]] = [
  [territoryX + x1 * referenceScale + epsilon, territoryY + y1 * referenceScale + epsilon],
  [territoryX + x2 * referenceScale - epsilon, territoryY + y2 * referenceScale - epsilon],
]
```

### Phase 2: Reset Integration
**resetTerritoryToDefaults():**
```typescript
// After existing resets, add clipExtent reset
if (originalDefaults.clipExtents && originalDefaults.clipExtents[territoryCode] !== undefined) {
  territoryStore.setTerritoryClipExtent(territoryCode, originalDefaults.clipExtents[territoryCode])
}
```

### Phase 3: UI Control Specifications
- Component: TerritoryParameterControls.vue
- Section: Advanced (collapsible)
- Controls: 4 RangeSlider components
- Labels: "Clip Left (x1)", "Clip Top (y1)", "Clip Right (x2)", "Clip Bottom (y2)"
- Range: -1.0 to 1.0 (step 0.01)
- Icons: ri-crop-line
- Update method: `territoryStore.setTerritoryClipExtent(territoryCode, {x1, y1, x2, y2})`

## Why Previous Attempts Failed

1. **Scale Multiplier Addition**: ClipExtent coordinates are normalized proportions, not scalable dimensions
2. **Double Offset Application**: Tried to add translateOffset where it was already being applied
3. **Coordinate System Misunderstanding**: ClipExtent is viewport-relative, not territory-relative

## What Won't Be Implemented

- **Scale-Reactive ClipExtent**: Would break preset proportions and make overseas territories invisible
- **Complex Coordinate Transformations**: Current d3-composite-projections approach is correct
- **Parameter Store Integration**: ClipExtent stays in territory store (existing pattern works)

## Status
Status: PLANNED - REVISED WITH PROPER UNDERSTANDING
Last Updated: 2025-10-17

## Key Insights from Architecture Analysis

1. **ClipExtent Pipeline**: Preset → PresetLoader → TerritoryStore → Provider → CompositeProjection
2. **Coordinate System**: Normalized values (-1.0 to 1.0) × referenceScale, NOT territory scale
3. **Core Issue**: ClipExtent fixed to map center, territories positioned with offset
4. **Solution**: Add territory offset to clipExtent calculation (simple addition)
5. **No Scale Reactivity**: Would break preset proportions and visibility