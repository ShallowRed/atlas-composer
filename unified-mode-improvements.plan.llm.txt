# Unified Mode Improvements - Implementation Plan

## Objective
Enhance unified mode behavior by:
1. Always displaying globe outline in unified mode (remove toggle)
2. Removing scale fitting mode toggle (always auto-fit)
3. Adding zoom capability with parametrable center in unified mode

## Affected Domains
- [ ] UI Store (docs/vue-architecture.llm.txt) - Remove showSphere toggle state
- [ ] Services (docs/services.llm.txt) - Update rendering logic for automatic sphere display
- [ ] Parameters (docs/services.llm.txt - Parameter Registry) - Add zoom parameter for unified mode
- [ ] Vue Components (docs/vue-architecture.llm.txt) - Remove UI toggles, add zoom controls
- [ ] Projections (docs/projections.llm.txt) - Update projection service to support zoom

## Context
- Architecture: docs/architecture.llm.txt
- Vue Architecture: docs/vue-architecture.llm.txt
- Services: docs/services.llm.txt
- Projections: docs/projections.llm.txt

## Current State Analysis

### Globe Outline (showSphere)
**Current Behavior:**
- Toggleable option in DisplayOptionsSection.vue
- Stored in UI store (showSphere ref)
- Passed to rendering services via MapRenderer
- Works across all view modes

**Implementation Points:**
- UI Store: `src/stores/ui.ts` - showSphere ref
- Component: `src/components/configuration/DisplayOptionsSection.vue` - Toggle control
- Renderer: `src/components/MapRenderer.vue` - Passes to cartographer
- Service: `src/services/rendering/cartographer-service.ts` - Renders sphere
- Coordinator: `src/services/rendering/map-render-coordinator.ts` - Config interface
- Initialization: `src/services/initialization/initialization-service.ts` - Initial values

### Fitting Mode (projectionFittingMode)
**Current Behavior:**
- Toggle between 'auto' (fit to data) and 'manual' (use explicit scale)
- Stored in config store (projectionFittingMode ref)
- UI in ProjectionParamsControls.vue
- Controls whether D3 projection.fitSize() is used or manual scale

**Implementation Points:**
- Config Store: `src/stores/config.ts` - projectionFittingMode ref, setProjectionFittingMode()
- Service: `src/services/projection/projection-service.ts` - fittingMode property, setFittingMode()
- Service: `src/services/rendering/cartographer-service.ts` - updateFittingMode()
- Component: `src/components/ui/projections/ProjectionParamsControls.vue` - Toggle control
- Renderer: `src/components/MapRenderer.vue` - onFittingModeChange watcher
- I18n: `src/i18n/locales/fr.json` & `en.json` - Translation keys

### Unified Mode Zoom (NEW)
**Required Capability:**
- Add zoom level parameter (scale multiplier relative to auto-fit)
- Add center point parameter (lon, lat) to control focus
- Apply to unified mode projections only
- Interact with auto-fit: scale = autoFitScale * zoomLevel

**Design Considerations:**
- Zoom should apply AFTER auto-fit calculates base scale
- Center should define the geographic point at the center of the view
- Should work with all projection types in unified mode
- Should be preserved in presets and URL state

## Changes

### Phase 1: Globe Outline - Always On in Unified Mode

**Rationale:** Globe outline provides essential context in unified mode by showing the full projection sphere, helping users understand the geographic context and projection distortions.

#### 1.1: Update ViewOrchestrationService
- [ ] File: src/services/view/view-orchestration-service.ts
  - Action: Add `shouldShowSphere(state: ViewState): boolean` method
  - Logic: Return `true` for unified mode, `false` otherwise
  - Why: Centralize conditional logic in orchestration service

#### 1.2: Remove showSphere from UI Store State
- [ ] File: src/stores/ui.ts
  - Action: Remove showSphere ref and related initialization
  - Keep: showGraticule, showCompositionBorders, showMapLimits
  - Why: No longer user-controlled, determined by view mode

#### 1.3: Update MapRenderer to Use Orchestration
- [ ] File: src/components/MapRenderer.vue
  - Action: Import ViewOrchestrationService
  - Replace: `showSphere: uiStore.showSphere` with `showSphere: ViewOrchestrationService.shouldShowSphere(viewState)`
  - Add: viewState computation (similar to useViewState composable)
  - Why: Get showSphere from orchestration logic, not user toggle

#### 1.4: Remove Sphere Toggle from UI
- [ ] File: src/components/configuration/DisplayOptionsSection.vue
  - Action: Remove ToggleControl for sphere
  - Keep: Graticule, composition borders, map limits toggles
  - Why: No longer user-controlled

#### 1.5: Update Rendering Services Interface
- [ ] File: src/services/rendering/map-render-coordinator.ts
  - Action: Update interfaces - showSphere remains in config interfaces
  - Note: Keep parameter in service interfaces for rendering logic
  - Why: Services still need the value, just computed differently

#### 1.6: Update Initialization Service
- [ ] File: src/services/initialization/initialization-service.ts
  - Action: Remove showSphere from display initialization
  - Remove: All `showSphere: false` initializations
  - Why: No longer stored in UI store

#### 1.7: Update I18n Files
- [ ] File: src/i18n/locales/fr.json
  - Action: Remove or comment `"sphere": "Afficher le contour du globe"`
  - Why: Toggle no longer exists in UI

- [ ] File: src/i18n/locales/en.json
  - Action: Remove or comment `"sphere": "Show globe outline"`
  - Why: Toggle no longer exists in UI

### Phase 2: Remove Fitting Mode Toggle (Always Auto-Fit)

**Rationale:** Auto-fit provides the best default behavior for all projections. Manual scale adjustment should be done through scaleMultiplier parameter, not by disabling auto-fit. This simplifies the UX and removes a confusing option.

#### 2.1: Remove Fitting Mode from Config Store
- [ ] File: src/stores/config.ts
  - Action: Remove projectionFittingMode ref
  - Action: Remove setProjectionFittingMode method
  - Clean: Remove from exports
  - Why: No longer needed, always use auto-fit

#### 2.2: Remove Fitting Mode from Projection Service
- [ ] File: src/services/projection/projection-service.ts
  - Action: Remove fittingMode property
  - Action: Remove setFittingMode() method
  - Action: Update createProjection() - always use auto-fit logic (current 'auto' path)
  - Action: Remove all conditional checks on fittingMode
  - Why: Always use auto-fit behavior

#### 2.3: Remove Fitting Mode from Cartographer Service
- [ ] File: src/services/rendering/cartographer-service.ts
  - Action: Remove updateFittingMode() method
  - Why: No longer needed

#### 2.4: Update MapRenderer
- [ ] File: src/components/MapRenderer.vue
  - Action: Remove onFittingModeChange from debouncedRenderMap
  - Action: Remove any fitting mode watchers
  - Why: No longer used

#### 2.5: Remove Fitting Mode Toggle from UI
- [ ] File: src/components/ui/projections/ProjectionParamsControls.vue
  - Action: Remove ToggleControl for fitting mode
  - Action: Remove conditional rendering based on projectionFittingMode
  - Logic: Always show scale controls (no conditional on 'manual' mode)
  - Why: Scale is always managed through scaleMultiplier with auto-fit

#### 2.6: Update I18n Files
- [ ] File: src/i18n/locales/fr.json
  - Action: Remove fitting mode translations:
    - `"fittingMode": "Ajustement de l'Ã©chelle"`
    - `"autoFitting": "Ajustement automatique"`
    - `"manualFitting": "Ajustement manuel"`
  
- [ ] File: src/i18n/locales/en.json
  - Action: Remove fitting mode translations:
    - `"fittingMode": "Scale fitting"`
    - `"autoFitting": "Auto fit to map"`
    - `"manualFitting": "Manual scale"`

### Phase 3: Add Zoom Support for Unified Mode

**Rationale:** Enable users to zoom into specific regions in unified mode by combining auto-fit with user-controlled zoom level and center point. This provides flexible exploration while maintaining proper scaling.

#### 3.1: Add Zoom Parameters to Parameter Registry
- [ ] File: src/core/parameters/parameter-definitions.ts
  - Action: Register 'zoomLevel' parameter
    - Type: 'number'
    - Description: 'Zoom multiplier applied to auto-fit scale (unified mode only)'
    - Unit: 'multiplier'
    - Source: 'preset'
    - Mutable: true
    - Exportable: true
    - Range: 0.5 to 10
    - Default: 1.0
    - Relevant for all projection families in unified mode
  - Action: Register 'zoomCenter' parameter
    - Type: 'tuple2'
    - Description: 'Geographic center point [longitude, latitude] for zoom focus (unified mode only)'
    - Unit: 'degrees'
    - Source: 'preset'
    - Mutable: true
    - Exportable: true
    - Range: [-180, -90] to [180, 90]
    - Default: [0, 0] or atlas-specific center
    - Relevant for all projection families in unified mode
  - Why: Define parameters through registry system

#### 3.2: Update Projection Service for Zoom
- [ ] File: src/services/projection/projection-service.ts
  - Action: Update createProjection() to apply zoom parameters
  - Logic Flow:
    1. Auto-fit to data (existing logic)
    2. If zoomLevel parameter exists: multiply scale by zoomLevel
    3. If zoomCenter parameter exists: adjust projection center/rotate
  - Implementation: Check parameters for 'zoomLevel' and 'zoomCenter' keys
  - Apply: After auto-fit, before returning projection
  - Why: Enable zoom in unified mode during projection creation

#### 3.3: Add Zoom Controls to UnifiedControls
- [ ] File: src/components/configuration/UnifiedControls.vue
  - Action: Add zoom controls section after ProjectionParamsControls
  - Add: RangeSlider for zoomLevel (0.5x to 10x)
  - Add: Coordinate inputs for zoomCenter (lon, lat)
  - Bind: To parameterStore zoom values (global scope)
  - Layout: Use card or section with clear labeling
  - Why: Provide UI for zoom control in unified mode

#### 3.4: Update ProjectionParamsControls (if needed)
- [ ] File: src/components/ui/projections/ProjectionParamsControls.vue
  - Action: Check if zoom controls should be integrated here instead
  - Decision: If this component is used in UnifiedControls, add zoom here
  - Alternative: Keep zoom separate in UnifiedControls template
  - Why: Maintain component organization and reusability

#### 3.5: Add I18n Translations
- [ ] File: src/i18n/locales/fr.json
  - Action: Add zoom translations:
    - `"zoom": "Zoom"`
    - `"zoomLevel": "Niveau de zoom"`
    - `"zoomCenter": "Centre du zoom"`
    - `"zoomCenterLon": "Longitude du centre"`
    - `"zoomCenterLat": "Latitude du centre"`

- [ ] File: src/i18n/locales/en.json
  - Action: Add zoom translations:
    - `"zoom": "Zoom"`
    - `"zoomLevel": "Zoom level"`
    - `"zoomCenter": "Zoom center"`
    - `"zoomCenterLon": "Center longitude"`
    - `"zoomCenterLat": "Center latitude"`

#### 3.6: Update Parameter Store to Support Zoom
- [ ] File: src/stores/parameters.ts
  - Action: Verify zoom parameters are properly handled
  - Check: getGlobalParameter(), setGlobalParameter() work with zoom params
  - Check: Parameter inheritance includes zoom parameters
  - Why: Ensure parameter system supports new zoom params

#### 3.7: Update Preset System (if needed)
- [ ] File: Preset files in configs/presets/
  - Action: Add zoom parameters to unified presets as optional
  - Example: Add zoomLevel and zoomCenter to world-unified.json
  - Why: Allow presets to define default zoom configurations

## Documentation Updates

Update after user validates changes work correctly:

- [ ] docs/projections.llm.txt
  - Section: Parameter Configuration
  - Add: zoomLevel and zoomCenter parameter descriptions
  - Add: Unified mode zoom behavior explanation
  - Present tense: "Unified mode supports zoom through zoomLevel and zoomCenter parameters"

- [ ] docs/services.llm.txt
  - Section: ProjectionService
  - Update: createProjection() method description
  - Add: Zoom application logic after auto-fit
  - Remove: Fitting mode references
  - Present tense: "createProjection() applies auto-fit, then applies zoom if parameters exist"

- [ ] docs/vue-architecture.llm.txt
  - Section: UI Store
  - Remove: showSphere from state description
  - Present tense: "showSphere determined by view mode through ViewOrchestrationService"
  
  - Section: Config Store
  - Remove: projectionFittingMode references
  - Present tense: "projections always use auto-fit with optional zoom parameters"
  
  - Section: Components
  - Update: DisplayOptionsSection description (remove sphere toggle)
  - Update: UnifiedControls description (add zoom controls)
  - Update: ProjectionParamsControls description (remove fitting toggle)

- [ ] docs/architecture.llm.txt
  - Section: Core Concepts â Parameter System
  - Add: Zoom parameters to parameter registry description
  - Present tense: "Parameter registry includes zoom parameters for unified mode"

## Verification

- [ ] TypeScript compilation succeeds without errors
- [ ] Unified mode displays globe outline automatically (no toggle in UI)
- [ ] Other modes do NOT display globe outline
- [ ] Fitting mode toggle removed from all projection controls
- [ ] Projections auto-fit by default in all modes
- [ ] Zoom controls visible in unified mode
- [ ] Zoom level adjusts scale appropriately
- [ ] Zoom center adjusts projection focus
- [ ] All affected tests updated and passing
- [ ] All .llm.txt documentation updated (after user validation)
- [ ] No temporal language in .llm.txt files

## Testing Checklist

- [ ] Test unified mode: globe outline always visible
- [ ] Test split mode: no globe outline
- [ ] Test composite modes: no globe outline
- [ ] Test projection parameters work without fitting toggle
- [ ] Test zoom level: 0.5x to 10x range works
- [ ] Test zoom center: pan to different coordinates
- [ ] Test preset loading: zoom parameters loaded correctly
- [ ] Test URL state: zoom parameters preserved in URL
- [ ] Test export: zoom parameters included in export

## Migration Notes

**Breaking Changes:**
1. `showSphere` removed from UI store - now computed by view mode
2. `projectionFittingMode` removed from config store - always auto-fit
3. Manual scale control removed - use scaleMultiplier parameter instead

**User-Visible Changes:**
1. Globe outline automatically shown in unified mode (cannot be disabled)
2. Scale fitting toggle removed (always auto-fits)
3. New zoom controls in unified mode for exploration

**No Backward Compatibility Required:**
- No users exist yet
- Clean architecture preferred over compatibility
- Fresh start for cleanest patterns

## Status
Status: PLANNED
Created: 2025-10-20
Last Updated: 2025-10-20
