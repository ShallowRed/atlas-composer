# Remove Legacy viewModes and defaultViewMode - Implementation Plan

## Objective
Aggressively remove legacy `viewModes` and `defaultViewMode` fields from the entire codebase. View modes should be determined dynamically from:
1. **Registry presets** - What view modes are AVAILABLE (which preset types exist for this atlas)
2. **Pattern service** - What view modes are RECOMMENDED (based on atlas pattern type)
3. **User selection** - Preset dropdown in UI allows users to switch modes

## Key Understanding

### Current Architecture (CORRECT)
- **Atlas Registry**: Defines available presets for each atlas (composite-custom, unified, split, built-in-composite)
- **Preset Type = View Mode**: Each preset has a `type` field that IS the view mode
- **Dynamic Discovery**: Available view modes = unique preset types for that atlas in registry
- **Pattern Service**: Provides recommendations, not constraints

### Legacy Behavior (TO REMOVE)
- **Atlas Config Fields**: `viewModes` array and `defaultViewMode` in atlas JSON files
- **AtlasConfig Interface**: `supportedViewModes` and `defaultViewMode` properties
- **Hardcoded Logic**: Services checking `config.supportedViewModes.includes()`

### New Behavior (TARGET)
- Query registry: `getAtlasPresets(atlasId)` → extract unique preset types
- Pattern service: `getRecommendedViewModes()` for UI hints
- Default selection: First `isDefault: true` preset, or first preset of any type
- No atlas-level view mode configuration needed

## Affected Domains
- [ ] Atlas System (docs/atlases.llm.txt)
- [ ] Preset System (docs/presets.llm.txt)
- [ ] Service Layer (docs/services.llm.txt)

## Context
- Architecture: docs/architecture.llm.txt
- Atlas docs: docs/atlases.llm.txt
- Preset docs: docs/presets.llm.txt
- Service docs: docs/services.llm.txt
- Registry file: configs/atlas-registry.json

## Changes

### Phase 1: Type System Cleanup
- [x] File: types/atlas-config.ts
  - Action: Remove `viewModes` and `defaultViewMode` from JSONAtlasConfig
  - Status: DONE

- [x] File: src/types/atlas.ts
  - Action: Remove `supportedViewModes` and `defaultViewMode` from AtlasConfig
  - Status: DONE

### Phase 2: Schema Cleanup
- [x] File: configs/schemas/atlas.schema.json
  - Action: Remove `viewModes` property definition
  - Status: DONE

### Phase 3: Atlas Config Files Cleanup
- [ ] File: configs/atlases/usa.json
  - Action: Remove `viewModes` array field (lines 11-16)
  - Why: View modes derived from registry presets

- [ ] File: configs/atlases/world.json
  - Action: Remove `viewModes` array field (lines 11-13)
  - Why: View modes derived from registry presets (only unified preset exists)

- [ ] File: configs/atlases/eu.json
  - Action: Remove `viewModes` array field if present
  - Why: View modes derived from registry presets

### Phase 4: Core Registry Enhancement
- [ ] File: src/core/atlases/registry.ts (or appropriate registry file)
  - Action: Add `getAvailableViewModes(atlasId: string): ViewMode[]` helper
  - Logic: Query registry, get presets, extract unique types, return array
  - Why: Central place to derive available view modes from registry

### Phase 5: Core Loader Cleanup
- [ ] File: src/core/atlases/loader.ts
  - Action: Remove lines reading `config.viewModes` and `config.defaultViewMode` (~309-310)
  - Action: Remove from createAtlasConfig return object (~318-319)
  - Action: May need to pass registry reference or use getAvailableViewModes()
  - Why: Stop reading legacy fields from atlas configs

### Phase 6: Service Layer Updates

- [ ] File: src/services/atlas/atlas-coordinator.ts
  - Action: Replace `config.supportedViewModes.includes()` check
  - New logic: Use registry `getAvailableViewModes()` or pattern service
  - Action: Replace `config.defaultViewMode` 
  - New logic: Get default preset from registry (isDefault: true), use its type
  - Lines affected: ~54, 56, 181

- [ ] File: src/services/initialization/initialization-service.ts
  - Action: Replace `atlasConfig.supportedViewModes.includes()`
  - Action: Replace `atlasConfig.defaultViewMode`
  - New logic: Query registry for available view modes and default preset
  - Lines affected: ~85, 87, 542

- [ ] File: src/services/view/view-orchestration-service.ts
  - Action: Replace `state.atlasConfig.supportedViewModes.length === 1`
  - New logic: Query registry presets, check if only one unique type
  - Line affected: ~253

- [ ] File: src/services/validation/preset-validation-service.ts
  - Action: Replace `atlasConfig.supportedViewModes.includes()`
  - New logic: Query registry for available view modes
  - Line affected: ~99

### Phase 7: Store Updates
- [ ] File: src/stores/config.ts
  - Action: Replace `atlasConfig.defaultViewMode`
  - New logic: Query registry for default preset
  - Action: Replace `config.supportedViewModes.length === 1`
  - New logic: Query registry presets
  - Lines affected: ~73, 102

### Phase 8: Composables Updates
- [ ] File: src/composables/useAtlasData.ts
  - Action: Replace `atlasConfig.supportedViewModes.includes()`
  - Action: Replace `atlasConfig.defaultViewMode`
  - New logic: Query registry for available view modes
  - Lines affected: ~66, 68, 70

- [ ] File: src/composables/useViewMode.ts
  - Action: Replace `atlasConfig.supportedViewModes`
  - New logic: Query registry for available view modes
  - Line affected: ~20

### Phase 9: Test Updates
- [ ] File: src/services/initialization/__tests__/initialization-service.test.ts
  - Action: Remove `defaultViewMode` and `supportedViewModes` from mock configs
  - Action: Mock registry getAvailableViewModes() and getDefaultPreset() instead
  - Lines affected: ~14, 15, 24, 240

- [ ] File: src/services/view/__tests__/view-orchestration-service.test.ts
  - Action: Remove `supportedViewModes` from mock configs
  - Action: Mock registry methods
  - Lines affected: ~14, 15, 327, 337

### Phase 10: Documentation Updates (AFTER USER VALIDATION)
- [ ] File: docs/atlases.llm.txt
  - Action: Remove `viewModes` and `defaultViewMode` rows from Key Fields Reference table (lines 325-326)
  - Action: Add explanation that view modes are derived from registry presets
  - Action: Reference AtlasPatternService for recommendations
  - Why: Document new pattern-based and registry-based approach

- [ ] File: docs/presets.llm.txt
  - Action: Add section explaining preset type → view mode relationship
  - Action: Explain how available view modes are discovered from registry
  - Why: Clarify preset system role in view mode management

- [ ] File: docs/services.llm.txt
  - Action: Update AtlasPatternService section
  - Action: Document registry query methods for view modes
  - Why: Document view mode discovery mechanism

## Implementation Strategy

1. **Complete Type/Schema Cleanup** (Already done)
2. **Add Registry Helper**: `getAvailableViewModes()` for querying registry
3. **Clean Atlas Configs**: Remove viewModes from JSON files
4. **Update Loader**: Stop reading legacy fields
5. **Update Services/Stores/Composables**: Use registry queries everywhere
6. **Update Tests**: Mock registry instead of config fields
7. **Run Tests & Typecheck**: Verify everything compiles and works
8. **Wait for User Validation**: Test in actual browser
9. **Update Documentation**: After user confirms it works

## Key Implementation Pattern

Replace this pattern:
```typescript
// OLD
config.supportedViewModes.includes(viewMode)
config.defaultViewMode
```

With this pattern:
```typescript
// NEW
import { getAvailableViewModes, getDefaultPreset } from '@/core/atlases/registry'

const availableViewModes = getAvailableViewModes(atlasId)
availableViewModes.includes(viewMode)

const defaultPreset = getDefaultPreset(atlasId)
const defaultViewMode = defaultPreset?.type ?? 'composite-custom'
```

## Verification Steps
- [ ] Code compiles without TypeScript errors
- [ ] All tests pass
- [ ] No grep matches for `config.viewModes` or `config.defaultViewMode` (except docs/tests)
- [ ] Atlas switching works correctly
- [ ] View mode switching works correctly
- [ ] Default view mode selection works for each atlas
- [ ] Preset dropdown shows correct options

## Status
Status: IMPLEMENTATION_COMPLETE - AWAITING_USER_VALIDATION
Created: 2025-10-21
Last Updated: 2025-10-21

## Summary of Changes
All legacy `viewModes` and `defaultViewMode` fields have been successfully removed from:
- ✅ Type definitions (types/atlas-config.ts, src/types/atlas.ts)
- ✅ JSON Schema (configs/schemas/atlas.schema.json)
- ✅ Atlas config files (usa.json, world.json, eu.json)
- ✅ Core loader (src/core/atlases/loader.ts)
- ✅ All services (atlas-coordinator, initialization-service, view-orchestration-service, preset-validation-service)
- ✅ Stores (config.ts)
- ✅ Composables (useAtlasData.ts, useViewMode.ts)
- ✅ Test files (updated mocks to use registry functions)

New registry helper functions added:
- `getAvailableViewModes(atlasId)` - Returns available view modes from preset types
- `getDefaultViewMode(atlasId)` - Returns default view mode from default preset

View modes are now dynamically determined from:
1. Registry presets (what's available)
2. Pattern service recommendations (what's recommended)
3. User selection (via preset dropdown)

Verification:
- Zero occurrences of legacy fields in main source code (excluding tests)
- Zero occurrences in atlas config JSON files
- TypeScript compilation errors related to our changes: RESOLVED
- Remaining test errors are pre-existing and unrelated to this change
